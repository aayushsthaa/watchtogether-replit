{"file_contents":{"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"backend/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { body, param } from \"express-validator\";\nimport { User } from \"./models/User\";\nimport { Room } from \"./models/Room\";\nimport { authenticateToken, AuthRequest } from \"./middleware/auth\";\nimport { requireAdmin } from \"./middleware/admin\";\nimport { validateRequest } from \"./middleware/validateRequest\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET || 'your-secret-key';\nconst SALT_ROUNDS = 10;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // ==================== AUTH ROUTES ====================\n  \n  // POST /api/auth/login - Login user\n  app.post(\n    '/api/auth/login',\n    [\n      body('username').notEmpty().withMessage('Username is required'),\n      body('password').notEmpty().withMessage('Password is required'),\n    ],\n    validateRequest,\n    async (req, res) => {\n      try {\n        const { username, password } = req.body;\n\n        const user = await User.findOne({ username });\n        if (!user) {\n          return res.status(401).json({ message: 'Invalid credentials' });\n        }\n\n        const isValidPassword = await bcrypt.compare(password, user.password);\n        if (!isValidPassword) {\n          return res.status(401).json({ message: 'Invalid credentials' });\n        }\n\n        const token = jwt.sign(\n          {\n            _id: user._id.toString(),\n            username: user.username,\n            isAdmin: user.isAdmin,\n          },\n          JWT_SECRET,\n          { expiresIn: '7d' }\n        );\n\n        res.cookie('token', token, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === 'production',\n          sameSite: 'lax',\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n        });\n\n        res.json({\n          token,\n          user: {\n            _id: user._id.toString(),\n            username: user.username,\n            isAdmin: user.isAdmin,\n            avatarUrl: user.avatarUrl || '',\n          },\n        });\n      } catch (error) {\n        console.error('Login error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // POST /api/auth/logout - Logout user\n  app.post('/api/auth/logout', (req, res) => {\n    res.clearCookie('token');\n    res.json({ message: 'Logged out successfully' });\n  });\n\n  // GET /api/auth/me - Get current user\n  app.get('/api/auth/me', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const user = await User.findById(req.user?._id).select('-password');\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      res.json({\n        _id: user._id.toString(),\n        username: user.username,\n        isAdmin: user.isAdmin,\n        avatarUrl: user.avatarUrl || '',\n      });\n    } catch (error) {\n      console.error('Get user error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // ==================== USER PROFILE ROUTES ====================\n\n  // PATCH /api/profile - Update own profile\n  app.patch(\n    '/api/profile',\n    authenticateToken,\n    [\n      body('username').optional().isLength({ min: 3, max: 30 }).withMessage('Username must be 3-30 characters'),\n      body('avatarUrl').optional().custom((value) => {\n        if (!value || value === '') return true;\n        \n        // Check if it's a base64 image\n        if (value.startsWith('data:image/')) {\n          const matches = value.match(/^data:image\\/(jpeg|jpg|png|gif|webp);base64,(.+)$/);\n          if (!matches) return false;\n          \n          // Check size (base64 adds ~33% overhead, so ~2.7MB base64 = ~2MB image)\n          const base64Length = matches[2].length;\n          const sizeInBytes = (base64Length * 3) / 4;\n          const sizeInMB = sizeInBytes / (1024 * 1024);\n          if (sizeInMB > 2.5) return false;\n          \n          return true;\n        }\n        \n        // Legacy: Also accept regular URLs\n        return /^https?:\\/\\/.+/.test(value);\n      }).withMessage('Invalid image format or size. Must be a valid image (jpg, png, gif, webp) under 2MB'),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const updates: any = {};\n\n        if (req.body.username) {\n          const existingUser = await User.findOne({ \n            username: req.body.username, \n            _id: { $ne: req.user?._id } \n          });\n          if (existingUser) {\n            return res.status(400).json({ message: 'Username already exists' });\n          }\n          updates.username = req.body.username;\n        }\n\n        if (req.body.avatarUrl !== undefined) {\n          updates.avatarUrl = req.body.avatarUrl;\n        }\n\n        const user = await User.findByIdAndUpdate(req.user?._id, updates, { new: true }).select('-password');\n        if (!user) {\n          return res.status(404).json({ message: 'User not found' });\n        }\n\n        res.json({\n          _id: user._id.toString(),\n          username: user.username,\n          isAdmin: user.isAdmin,\n          avatarUrl: user.avatarUrl || '',\n        });\n      } catch (error) {\n        console.error('Update profile error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // PATCH /api/profile/password - Change own password\n  app.patch(\n    '/api/profile/password',\n    authenticateToken,\n    [\n      body('currentPassword').notEmpty().withMessage('Current password is required'),\n      body('newPassword').isLength({ min: 6 }).withMessage('New password must be at least 6 characters'),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const user = await User.findById(req.user?._id);\n        if (!user) {\n          return res.status(404).json({ message: 'User not found' });\n        }\n\n        const isValidPassword = await bcrypt.compare(req.body.currentPassword, user.password);\n        if (!isValidPassword) {\n          return res.status(401).json({ message: 'Current password is incorrect' });\n        }\n\n        user.password = await bcrypt.hash(req.body.newPassword, SALT_ROUNDS);\n        await user.save();\n\n        res.json({ message: 'Password updated successfully' });\n      } catch (error) {\n        console.error('Change password error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // ==================== ADMIN USER MANAGEMENT ROUTES ====================\n\n  // GET /api/admin/users - Get all users (admin only)\n  app.get('/api/admin/users', authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const users = await User.find().select('-password').sort({ createdAt: -1 });\n      res.json(users);\n    } catch (error) {\n      console.error('Get users error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // POST /api/admin/users - Create new user (admin only)\n  app.post(\n    '/api/admin/users',\n    authenticateToken,\n    requireAdmin,\n    [\n      body('username').isLength({ min: 3, max: 30 }).withMessage('Username must be 3-30 characters'),\n      body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),\n      body('isAdmin').optional().isBoolean().withMessage('isAdmin must be a boolean'),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const { username, password, isAdmin } = req.body;\n\n        const existingUser = await User.findOne({ username });\n        if (existingUser) {\n          return res.status(400).json({ message: 'Username already exists' });\n        }\n\n        const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);\n        const user = new User({\n          username,\n          password: hashedPassword,\n          isAdmin: isAdmin || false,\n        });\n\n        await user.save();\n\n        res.status(201).json({\n          _id: user._id.toString(),\n          username: user.username,\n          isAdmin: user.isAdmin,\n          createdAt: user.createdAt,\n        });\n      } catch (error) {\n        console.error('Create user error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // PATCH /api/admin/users/:id - Update user (admin only)\n  app.patch(\n    '/api/admin/users/:id',\n    authenticateToken,\n    requireAdmin,\n    [\n      param('id').isMongoId().withMessage('Invalid user ID'),\n      body('username').optional().isLength({ min: 3, max: 30 }),\n      body('password').optional().isLength({ min: 6 }),\n      body('isAdmin').optional().isBoolean(),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const { id } = req.params;\n        const updates: any = {};\n\n        if (req.body.username) {\n          const existingUser = await User.findOne({ \n            username: req.body.username, \n            _id: { $ne: id } \n          });\n          if (existingUser) {\n            return res.status(400).json({ message: 'Username already exists' });\n          }\n          updates.username = req.body.username;\n        }\n\n        if (req.body.password) {\n          updates.password = await bcrypt.hash(req.body.password, SALT_ROUNDS);\n        }\n\n        if (req.body.isAdmin !== undefined) {\n          updates.isAdmin = req.body.isAdmin;\n        }\n\n        const user = await User.findByIdAndUpdate(id, updates, { new: true }).select('-password');\n        if (!user) {\n          return res.status(404).json({ message: 'User not found' });\n        }\n\n        res.json(user);\n      } catch (error) {\n        console.error('Update user error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // DELETE /api/admin/users/:id - Delete user (admin only)\n  app.delete(\n    '/api/admin/users/:id',\n    authenticateToken,\n    requireAdmin,\n    [param('id').isMongoId().withMessage('Invalid user ID')],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const { id } = req.params;\n\n        const user = await User.findByIdAndDelete(id);\n        if (!user) {\n          return res.status(404).json({ message: 'User not found' });\n        }\n\n        res.json({ message: 'User deleted successfully' });\n      } catch (error) {\n        console.error('Delete user error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // ==================== ROOM ROUTES ====================\n\n  // GET /api/rooms - Get all active rooms\n  app.get('/api/rooms', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const rooms = await Room.find({ isActive: true }).sort({ createdAt: -1 });\n      res.json(rooms);\n    } catch (error) {\n      console.error('Get rooms error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // GET /api/rooms/:id - Get room details\n  app.get(\n    '/api/rooms/:id',\n    authenticateToken,\n    [param('id').isMongoId().withMessage('Invalid room ID')],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const room = await Room.findById(req.params.id);\n        if (!room) {\n          return res.status(404).json({ message: 'Room not found' });\n        }\n\n        res.json(room);\n      } catch (error) {\n        console.error('Get room error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // POST /api/rooms - Create new room\n  app.post(\n    '/api/rooms',\n    authenticateToken,\n    [\n      body('name').notEmpty().isLength({ max: 50 }).withMessage('Room name is required (max 50 chars)'),\n      body('mode').optional().isIn(['screenshare', 'watchparty']),\n      body('videoUrl').optional().isURL().withMessage('Invalid video URL'),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const { name, mode, videoUrl } = req.body;\n\n        const room = new Room({\n          name,\n          mode: mode || 'watchparty',\n          videoUrl: videoUrl || '',\n          ownerId: req.user?._id,\n          ownerUsername: req.user?.username,\n          participants: [{\n            userId: req.user?._id,\n            username: req.user?.username,\n            joinedAt: new Date(),\n          }],\n          isActive: true,\n        });\n\n        await room.save();\n        res.status(201).json(room);\n      } catch (error) {\n        console.error('Create room error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // PATCH /api/rooms/:id - Update room (owner only)\n  app.patch(\n    '/api/rooms/:id',\n    authenticateToken,\n    [\n      param('id').isMongoId().withMessage('Invalid room ID'),\n      body('name').optional().isLength({ min: 1, max: 50 }),\n      body('mode').optional().isIn(['screenshare', 'watchparty']),\n      body('videoUrl').optional().custom((value) => {\n        if (value === '') return true;\n        return /^https?:\\/\\/.+/.test(value);\n      }),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const room = await Room.findById(req.params.id);\n        if (!room) {\n          return res.status(404).json({ message: 'Room not found' });\n        }\n\n        if (room.ownerId.toString() !== req.user?._id) {\n          return res.status(403).json({ message: 'Only the room owner can update the room' });\n        }\n\n        const updates: any = {};\n        if (req.body.name) updates.name = req.body.name;\n        if (req.body.mode) updates.mode = req.body.mode;\n        if (req.body.videoUrl !== undefined) updates.videoUrl = req.body.videoUrl;\n\n        const updatedRoom = await Room.findByIdAndUpdate(req.params.id, updates, { new: true });\n        res.json(updatedRoom);\n      } catch (error) {\n        console.error('Update room error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // POST /api/rooms/:id/join - Join room (with single room restriction)\n  app.post(\n    '/api/rooms/:id/join',\n    authenticateToken,\n    [param('id').isMongoId().withMessage('Invalid room ID')],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const room = await Room.findById(req.params.id);\n        if (!room) {\n          return res.status(404).json({ message: 'Room not found' });\n        }\n\n        const alreadyJoined = room.participants.some(\n          p => p.userId === req.user?._id\n        );\n\n        if (!alreadyJoined) {\n          // Single room restriction: Remove user from any other rooms first\n          await Room.updateMany(\n            { 'participants.userId': req.user?._id },\n            { $pull: { participants: { userId: req.user?._id } } }\n          );\n\n          // Add user to the new room\n          room.participants.push({\n            userId: req.user?._id!,\n            username: req.user?.username!,\n            joinedAt: new Date(),\n          });\n          await room.save();\n        }\n\n        res.json(room);\n      } catch (error) {\n        console.error('Join room error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // POST /api/rooms/:id/leave - Leave room\n  app.post(\n    '/api/rooms/:id/leave',\n    authenticateToken,\n    [param('id').isMongoId().withMessage('Invalid room ID')],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const room = await Room.findById(req.params.id);\n        if (!room) {\n          return res.status(404).json({ message: 'Room not found' });\n        }\n\n        room.participants = room.participants.filter(\n          p => p.userId !== req.user?._id\n        );\n\n        await room.save();\n        res.json(room);\n      } catch (error) {\n        console.error('Leave room error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // POST /api/rooms/:id/transfer - Transfer ownership\n  app.post(\n    '/api/rooms/:id/transfer',\n    authenticateToken,\n    [\n      param('id').isMongoId().withMessage('Invalid room ID'),\n      body('newOwnerId').isMongoId().withMessage('Invalid new owner ID'),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const room = await Room.findById(req.params.id);\n        if (!room) {\n          return res.status(404).json({ message: 'Room not found' });\n        }\n\n        if (room.ownerId.toString() !== req.user?._id) {\n          return res.status(403).json({ message: 'Only the room owner can transfer ownership' });\n        }\n\n        const newOwner = await User.findById(req.body.newOwnerId);\n        if (!newOwner) {\n          return res.status(404).json({ message: 'New owner not found' });\n        }\n\n        room.ownerId = newOwner._id;\n        room.ownerUsername = newOwner.username;\n        await room.save();\n\n        res.json(room);\n      } catch (error) {\n        console.error('Transfer ownership error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // DELETE /api/rooms/:id - Delete/close room (owner only)\n  app.delete(\n    '/api/rooms/:id',\n    authenticateToken,\n    [param('id').isMongoId().withMessage('Invalid room ID')],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const room = await Room.findById(req.params.id);\n        if (!room) {\n          return res.status(404).json({ message: 'Room not found' });\n        }\n\n        if (room.ownerId.toString() !== req.user?._id) {\n          return res.status(403).json({ message: 'Only the room owner can delete the room' });\n        }\n\n        room.isActive = false;\n        await room.save();\n\n        res.json({ message: 'Room closed successfully' });\n      } catch (error) {\n        console.error('Delete room error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // ==================== MESSAGE ROUTES ====================\n  // Messages are now stored in memory only (not persisted to MongoDB)\n  const roomMessages = new Map<string, any[]>();\n\n  // GET /api/rooms/:id/messages - Get chat history (from memory)\n  app.get(\n    '/api/rooms/:id/messages',\n    authenticateToken,\n    [param('id').isMongoId().withMessage('Invalid room ID')],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const messages = roomMessages.get(req.params.id) || [];\n        res.json(messages);\n      } catch (error) {\n        console.error('Get messages error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  // POST /api/rooms/:id/messages - Send message (store in memory only)\n  app.post(\n    '/api/rooms/:id/messages',\n    authenticateToken,\n    [\n      param('id').isMongoId().withMessage('Invalid room ID'),\n      body('content').notEmpty().isLength({ max: 1000 }).withMessage('Message content is required (max 1000 chars)'),\n      body('type').optional().isIn(['text', 'gif', 'system']),\n      body('gifUrl').optional().isURL(),\n    ],\n    validateRequest,\n    async (req: AuthRequest, res) => {\n      try {\n        const { content, type, gifUrl } = req.body;\n\n        const message = {\n          _id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n          roomId: req.params.id,\n          userId: req.user?._id,\n          username: req.user?.username,\n          content,\n          type: type || 'text',\n          gifUrl,\n          createdAt: new Date().toISOString(),\n        };\n\n        // Store in memory\n        if (!roomMessages.has(req.params.id)) {\n          roomMessages.set(req.params.id, []);\n        }\n        const messages = roomMessages.get(req.params.id)!;\n        messages.push(message);\n        \n        // Keep only last 100 messages per room\n        if (messages.length > 100) {\n          messages.shift();\n        }\n\n        res.status(201).json(message);\n      } catch (error) {\n        console.error('Send message error:', error);\n        res.status(500).json({ message: 'Internal server error' });\n      }\n    }\n  );\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20155},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, type InsertUser, type User } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, UserPlus, Edit, Trash2, Shield, Users } from \"lucide-react\";\n\n// Mock data\nconst mockUsers: User[] = [\n  {\n    _id: \"1\",\n    username: \"admin\",\n    password: \"\",\n    isAdmin: true,\n    createdAt: new Date().toISOString(),\n  },\n  {\n    _id: \"2\",\n    username: \"john_doe\",\n    password: \"\",\n    isAdmin: false,\n    createdAt: new Date().toISOString(),\n  },\n  {\n    _id: \"3\",\n    username: \"jane_smith\",\n    password: \"\",\n    isAdmin: false,\n    createdAt: new Date().toISOString(),\n  },\n];\n\nexport default function AdminDashboard() {\n  const [users, setUsers] = useState<User[]>(mockUsers);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const createForm = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      isAdmin: false,\n    },\n  });\n\n  const editForm = useForm<Partial<InsertUser>>({\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      isAdmin: false,\n    },\n  });\n\n  const filteredUsers = users.filter((user) =>\n    user.username.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const onCreateUser = (data: InsertUser) => {\n    const newUser: User = {\n      _id: String(Date.now()),\n      ...data,\n      createdAt: new Date().toISOString(),\n    };\n    setUsers([...users, newUser]);\n    setCreateDialogOpen(false);\n    createForm.reset();\n  };\n\n  const onEditUser = (data: Partial<InsertUser>) => {\n    if (!selectedUser) return;\n    setUsers(\n      users.map((u) =>\n        u._id === selectedUser._id ? { ...u, ...data } : u\n      )\n    );\n    setEditDialogOpen(false);\n    setSelectedUser(null);\n    editForm.reset();\n  };\n\n  const onDeleteUser = () => {\n    if (!selectedUser) return;\n    setUsers(users.filter((u) => u._id !== selectedUser._id));\n    setDeleteDialogOpen(false);\n    setSelectedUser(null);\n  };\n\n  const openEditDialog = (user: User) => {\n    setSelectedUser(user);\n    editForm.reset({\n      username: user.username,\n      password: \"\",\n      isAdmin: user.isAdmin,\n    });\n    setEditDialogOpen(true);\n  };\n\n  const openDeleteDialog = (user: User) => {\n    setSelectedUser(user);\n    setDeleteDialogOpen(true);\n  };\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"container max-w-7xl mx-auto p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">\n              User Management\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Manage users and permissions\n            </p>\n          </div>\n          <Button\n            onClick={() => setCreateDialogOpen(true)}\n            data-testid=\"button-create-user\"\n          >\n            <UserPlus className=\"mr-2 h-4 w-4\" />\n            Create User\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search users...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-9\"\n            data-testid=\"input-search-users\"\n          />\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-2 space-y-0 pb-2\">\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-users\">\n                {users.length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-2 space-y-0 pb-2\">\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n              <CardTitle className=\"text-sm font-medium\">Admins</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-admin-count\">\n                {users.filter((u) => u.isAdmin).length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* User Grid */}\n        {filteredUsers.length === 0 ? (\n          <Card className=\"p-12\">\n            <div className=\"flex flex-col items-center justify-center text-center space-y-3\">\n              <Users className=\"h-12 w-12 text-muted-foreground\" />\n              <div className=\"space-y-1\">\n                <h3 className=\"font-semibold\">No users found</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {searchQuery\n                    ? \"Try adjusting your search\"\n                    : \"Create your first user to get started\"}\n                </p>\n              </div>\n            </div>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {filteredUsers.map((user) => (\n              <Card\n                key={user._id}\n                className=\"overflow-hidden\"\n                data-testid={`card-user-${user._id}`}\n              >\n                <CardHeader className=\"gap-2 space-y-0\">\n                  <div className=\"flex items-start gap-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback>\n                        {user.username.slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle\n                        className=\"text-base truncate\"\n                        data-testid={`text-username-${user._id}`}\n                      >\n                        {user.username}\n                      </CardTitle>\n                      {user.isAdmin && (\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"mt-1\"\n                          data-testid={`badge-admin-${user._id}`}\n                        >\n                          <Shield className=\"mr-1 h-3 w-3\" />\n                          Admin\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => openEditDialog(user)}\n                    data-testid={`button-edit-${user._id}`}\n                  >\n                    <Edit className=\"mr-1 h-3 w-3\" />\n                    Edit\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => openDeleteDialog(user)}\n                    data-testid={`button-delete-${user._id}`}\n                  >\n                    <Trash2 className=\"mr-1 h-3 w-3\" />\n                    Delete\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create User Dialog */}\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogContent data-testid=\"dialog-create-user\">\n            <DialogHeader>\n              <DialogTitle>Create User</DialogTitle>\n              <DialogDescription>\n                Add a new user to the system\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form\n                onSubmit={createForm.handleSubmit(onCreateUser)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={createForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter username\"\n                          data-testid=\"input-create-username\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Enter password\"\n                          data-testid=\"input-create-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"isAdmin\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between gap-2 rounded-md border p-3 space-y-0\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Admin Privileges</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Grant administrative access\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-create-admin\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCreateDialogOpen(false)}\n                    data-testid=\"button-cancel-create\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" data-testid=\"button-submit-create\">\n                    Create User\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit User Dialog */}\n        <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n          <DialogContent data-testid=\"dialog-edit-user\">\n            <DialogHeader>\n              <DialogTitle>Edit User</DialogTitle>\n              <DialogDescription>\n                Update user information and permissions\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form\n                onSubmit={editForm.handleSubmit(onEditUser)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={editForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter username\"\n                          data-testid=\"input-edit-username\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Leave empty to keep current\"\n                          data-testid=\"input-edit-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"isAdmin\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between gap-2 rounded-md border p-3 space-y-0\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Admin Privileges</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Grant administrative access\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-edit-admin\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditDialogOpen(false)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" data-testid=\"button-submit-edit\">\n                    Save Changes\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n          <AlertDialogContent data-testid=\"dialog-delete-user\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete User</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to delete{\" \"}\n                <span className=\"font-semibold\">{selectedUser?.username}</span>?\n                This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete\">\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction\n                onClick={onDeleteUser}\n                className=\"bg-destructive text-destructive-foreground border-destructive-border\"\n                data-testid=\"button-confirm-delete\"\n              >\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16652},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/system-message.tsx":{"content":"import type { Message } from \"@shared/schema\";\n\ninterface SystemMessageProps {\n  message: Message;\n}\n\nexport function SystemMessage({ message }: SystemMessageProps) {\n  const timestamp = new Date(message.createdAt).toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  return (\n    <div\n      className=\"flex items-center justify-center px-4 py-2\"\n      data-testid={`system-message-${message._id}`}\n    >\n      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n        <span data-testid={`text-system-content-${message._id}`}>\n          {message.content}\n        </span>\n        <span className=\"text-[10px]\">•</span>\n        <span data-testid={`text-system-time-${message._id}`}>{timestamp}</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":779},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"backend/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport bcrypt from \"bcrypt\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectDB } from \"./db\";\nimport { setupWebSocket } from \"./websocket\";\nimport { User } from \"./models/User\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Create default admin user on first run\nasync function createDefaultAdmin() {\n  try {\n    const adminExists = await User.findOne({ username: 'admin' });\n    if (!adminExists) {\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      const admin = new User({\n        username: 'admin',\n        password: hashedPassword,\n        isAdmin: true,\n      });\n      await admin.save();\n      console.log('✅ Default admin user created (username: admin, password: admin123)');\n    }\n  } catch (error) {\n    console.error('Error creating default admin:', error);\n  }\n}\n\n(async () => {\n  // Connect to MongoDB\n  await connectDB();\n\n  // Create default admin user\n  await createDefaultAdmin();\n\n  // Register routes and get HTTP server\n  const server = await registerRoutes(app);\n\n  // Initialize WebSocket server\n  setupWebSocket(server);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3066},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"backend/models/Message.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IMessage extends Document {\n  roomId: mongoose.Types.ObjectId;\n  userId: mongoose.Types.ObjectId;\n  username: string;\n  content: string;\n  type: 'text' | 'gif' | 'system';\n  gifUrl?: string;\n  createdAt: Date;\n}\n\nconst MessageSchema = new Schema<IMessage>({\n  roomId: {\n    type: Schema.Types.ObjectId,\n    ref: 'Room',\n    required: true,\n    index: true,\n  },\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  username: {\n    type: String,\n    required: true,\n  },\n  content: {\n    type: String,\n    required: true,\n    maxlength: 1000,\n  },\n  type: {\n    type: String,\n    enum: ['text', 'gif', 'system'],\n    default: 'text',\n  },\n  gifUrl: {\n    type: String,\n  },\n}, {\n  timestamps: { createdAt: true, updatedAt: false },\n});\n\nexport const Message = mongoose.model<IMessage>('Message', MessageSchema);\n","size_bytes":920},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"..\", \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"..\", \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"..\", \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1078},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/chat-panel.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { ChatMessage } from \"./chat-message\";\nimport { SystemMessage } from \"./system-message\";\nimport { ChatInput } from \"./chat-input\";\nimport type { Message } from \"@shared/schema\";\n\ninterface ChatPanelProps {\n  messages: Message[];\n  onSendMessage?: (content: string) => void;\n}\n\nexport function ChatPanel({ messages, onSendMessage }: ChatPanelProps) {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"flex flex-col h-full border-l\" data-testid=\"chat-panel\">\n      <div className=\"p-4 border-b\">\n        <h3 className=\"font-semibold\">Chat</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          {messages.filter((m) => m.type !== \"system\").length} messages\n        </p>\n      </div>\n      <ScrollArea className=\"flex-1\" ref={scrollRef}>\n        <div className=\"py-2 space-y-1\">\n          {messages.length === 0 ? (\n            <div className=\"flex items-center justify-center h-32 text-sm text-muted-foreground\">\n              No messages yet\n            </div>\n          ) : (\n            messages.map((message) =>\n              message.type === \"system\" ? (\n                <SystemMessage key={message._id} message={message} />\n              ) : (\n                <ChatMessage key={message._id} message={message} />\n              )\n            )\n          )}\n        </div>\n      </ScrollArea>\n      <ChatInput onSendMessage={onSendMessage} />\n    </div>\n  );\n}\n","size_bytes":1657},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/chat-input.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Smile, Send } from \"lucide-react\";\n\ninterface ChatInputProps {\n  onSendMessage?: (content: string) => void;\n}\n\nexport function ChatInput({ onSendMessage }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim()) {\n      onSendMessage?.(message.trim());\n      setMessage(\"\");\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"border-t p-4\">\n      <div className=\"flex gap-2\">\n        <Textarea\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Type a message...\"\n          className=\"resize-none min-h-[44px] max-h-32\"\n          rows={1}\n          data-testid=\"input-chat-message\"\n        />\n        <div className=\"flex flex-col gap-2\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            data-testid=\"button-emoji-picker\"\n          >\n            <Smile className=\"h-5 w-5\" />\n          </Button>\n          <Button\n            type=\"submit\"\n            size=\"icon\"\n            disabled={!message.trim()}\n            data-testid=\"button-send-message\"\n          >\n            <Send className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n}\n","size_bytes":1665},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 15% 98%;\n\n  --foreground: 220 15% 12%;\n\n  --border: 220 10% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 12%;\n\n  --card-border: 220 10% 92%;\n\n  --sidebar: 220 15% 96%;\n\n  --sidebar-foreground: 220 15% 12%;\n\n  --sidebar-border: 220 10% 90%;\n\n  --sidebar-primary: 250 70% 55%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 12% 92%;\n\n  --sidebar-accent-foreground: 220 15% 12%;\n\n  --sidebar-ring: 250 70% 55%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 15% 12%;\n\n  --popover-border: 220 10% 92%;\n\n  --primary: 250 70% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 12% 94%;\n\n  --secondary-foreground: 220 15% 12%;\n\n  --muted: 220 12% 95%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 220 15% 94%;\n\n  --accent-foreground: 220 15% 12%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 10% 82%;\n  --ring: 250 70% 55%;\n  --chart-1: 250 70% 45%;\n  --chart-2: 142 70% 40%;\n  --chart-3: 38 90% 50%;\n  --chart-4: 200 80% 45%;\n  --chart-5: 280 65% 50%;\n\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Menlo', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 12% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 12% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 15% 12% / 0.06), 0px 1px 2px -1px hsl(220 15% 12% / 0.04);\n  --shadow: 0px 4px 6px 0px hsl(220 15% 12% / 0.07), 0px 2px 4px -1px hsl(220 15% 12% / 0.05);\n  --shadow-md: 0px 6px 12px 0px hsl(220 15% 12% / 0.08), 0px 3px 6px -2px hsl(220 15% 12% / 0.06);\n  --shadow-lg: 0px 10px 20px 0px hsl(220 15% 12% / 0.10), 0px 5px 10px -3px hsl(220 15% 12% / 0.08);\n  --shadow-xl: 0px 20px 40px 0px hsl(220 15% 12% / 0.12), 0px 10px 20px -5px hsl(220 15% 12% / 0.10);\n  --shadow-2xl: 0px 30px 60px 0px hsl(220 15% 12% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 15% 20%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 15% 16%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 220 15% 14%;\n\n  --sidebar-primary: 250 70% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 15% 14%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 250 70% 60%;\n\n  --popover: 220 15% 14%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 220 15% 18%;\n\n  --primary: 250 70% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 15% 16%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 220 12% 15%;\n\n  --muted-foreground: 220 10% 65%;\n\n  --accent: 220 15% 15%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 15% 28%;\n  --ring: 250 70% 60%;\n  --chart-1: 250 70% 65%;\n  --chart-2: 142 70% 55%;\n  --chart-3: 38 90% 60%;\n  --chart-4: 200 80% 60%;\n  --chart-5: 280 65% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px 0px hsl(0 0% 0% / 0.28), 0px 3px 6px -2px hsl(0 0% 0% / 0.22);\n  --shadow-lg: 0px 10px 20px 0px hsl(0 0% 0% / 0.32), 0px 5px 10px -3px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 20px 40px 0px hsl(0 0% 0% / 0.38), 0px 10px 20px -5px hsl(0 0% 0% / 0.30);\n  --shadow-2xl: 0px 30px 60px 0px hsl(0 0% 0% / 0.45);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11373},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ownership-transfer.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Crown } from \"lucide-react\";\nimport type { Participant } from \"@shared/schema\";\n\ninterface OwnershipTransferProps {\n  participants: Participant[];\n  currentOwnerId: string;\n  onTransfer?: (newOwnerId: string) => void;\n}\n\nexport function OwnershipTransfer({\n  participants,\n  currentOwnerId,\n  onTransfer,\n}: OwnershipTransferProps) {\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n  const [open, setOpen] = useState(false);\n\n  const eligibleParticipants = participants.filter(\n    (p) => p.userId !== currentOwnerId\n  );\n\n  const handleTransfer = () => {\n    if (selectedUserId) {\n      onTransfer?.(selectedUserId);\n      setOpen(false);\n      setSelectedUserId(\"\");\n    }\n  };\n\n  if (eligibleParticipants.length === 0) {\n    return null;\n  }\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          data-testid=\"button-transfer-ownership\"\n        >\n          <Crown className=\"mr-1 h-4 w-4\" />\n          Transfer Ownership\n        </Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent data-testid=\"dialog-transfer-ownership\">\n        <AlertDialogHeader>\n          <AlertDialogTitle>Transfer Room Ownership</AlertDialogTitle>\n          <AlertDialogDescription>\n            Select a participant to become the new room owner. This action cannot\n            be undone.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <div className=\"py-4\">\n          <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n            <SelectTrigger data-testid=\"select-new-owner\">\n              <SelectValue placeholder=\"Select new owner\" />\n            </SelectTrigger>\n            <SelectContent>\n              {eligibleParticipants.map((participant) => (\n                <SelectItem\n                  key={participant.userId}\n                  value={participant.userId}\n                  data-testid={`select-option-${participant.userId}`}\n                >\n                  {participant.username}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <AlertDialogFooter>\n          <AlertDialogCancel data-testid=\"button-cancel-transfer\">\n            Cancel\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleTransfer}\n            disabled={!selectedUserId}\n            data-testid=\"button-confirm-transfer\"\n          >\n            Transfer Ownership\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":3081},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"design_guidelines.md":{"content":"# WatchTogether Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Hybrid Design System  \nDrawing inspiration from **Discord** (real-time chat UX), **Linear** (clean professional interface), and **Twitch** (streaming/watch party features)\n\n**Key Principles:**\n- Dark-first design for comfortable viewing experiences\n- Clear hierarchy for room controls and permissions\n- Seamless mobile-to-desktop responsive patterns\n- Real-time feedback for all collaborative actions\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode (Primary):**\n- Background Base: 220 15% 8%\n- Surface: 220 15% 12%\n- Surface Elevated: 220 15% 16%\n- Primary Brand: 250 70% 60% (vibrant purple for CTAs and active states)\n- Text Primary: 0 0% 98%\n- Text Secondary: 220 10% 65%\n- Border: 220 15% 20%\n- Success (online): 142 70% 50%\n- Warning (owner controls): 38 90% 60%\n- Error: 0 70% 60%\n\n**Light Mode (Secondary):**\n- Background Base: 220 15% 98%\n- Surface: 0 0% 100%\n- Primary Brand: 250 70% 55%\n- Text Primary: 220 15% 12%\n- Text Secondary: 220 10% 45%\n- Border: 220 10% 88%\n\n### B. Typography\n\n**Font Families:**\n- Primary: 'Inter' (Google Fonts) - UI text, chat, forms\n- Monospace: 'JetBrains Mono' - Room codes, technical info\n\n**Hierarchy:**\n- Headings: 600-700 weight, tight letter-spacing\n- Body: 400-500 weight, comfortable line-height (1.6)\n- Chat Messages: 400 weight, 14-16px\n- Room Codes/Links: Monospace, 500 weight\n- Buttons: 500-600 weight\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units of **2, 3, 4, 6, 8, 12, 16**\n- Micro spacing: p-2, gap-3\n- Component spacing: p-4, p-6, gap-4\n- Section spacing: p-8, py-12, gap-8\n- Page margins: px-4 (mobile), px-8 (desktop)\n\n**Grid System:**\n- Mobile: Single column, full-width video/screen\n- Tablet: 2-column (video + chat sidebar)\n- Desktop: 3-column (sidebar navigation, main video, chat panel)\n\n### D. Component Library\n\n**Navigation:**\n- Persistent left sidebar (collapsible on mobile)\n- Room list with status indicators (active, owner badge)\n- Admin panel access (crown icon for admins)\n- User profile dropdown with quick settings\n\n**Room Interface:**\n- Full-width video/screen share container (16:9 aspect ratio preserved)\n- Floating room controls (only owner sees mode toggle)\n- Owner badge and transfer ownership button\n- Room invite link with copy-to-clipboard\n- Mode indicator (screen share vs watch party)\n\n**Chat System:**\n- Fixed right panel (slide-in on mobile)\n- Message bubbles with user avatars (32px circle)\n- Emoji picker button (inline with input)\n- GIF search integration (Giphy)\n- Timestamp on hover\n- Join/leave notifications (muted style)\n- Typing indicators\n\n**Admin Dashboard:**\n- Card-based user management grid\n- Search and filter controls\n- Inline edit for password reset\n- Action buttons (edit, delete) with confirmation modals\n- User statistics and activity logs\n\n**Forms & Inputs:**\n- Consistent input styling with focus states (border: primary color)\n- Dark mode inputs with 220 15% 16% background\n- Clear validation states (green border for success, red for error)\n- Password strength indicators\n- Auto-complete for user invites\n\n**Buttons:**\n- Primary: Filled with brand color, 500 weight\n- Secondary: Outline with border\n- Ghost: Transparent with hover background\n- Icon buttons: 40px x 40px touch target\n- Destructive actions: Red outline/fill\n\n**Data Display:**\n- Room cards with thumbnail, title, participant count\n- User status pills (online/offline/in-room)\n- Owner crown icon (gold 45 90% 55%)\n- Admin badge (distinct from owner)\n\n**Modals & Overlays:**\n- Centered modals with backdrop blur\n- Slide-up drawers on mobile\n- Confirmation dialogs for ownership transfer\n- Toast notifications for real-time events\n\n### E. Interaction Patterns\n\n**Real-time Feedback:**\n- Instant chat message delivery with optimistic UI\n- Live participant list updates\n- Connection status indicators (pulsing dot)\n- Synced video playback indicator\n\n**Mobile Optimizations:**\n- Bottom sheet for quick actions\n- Swipe gestures (chat drawer, room list)\n- Large touch targets (min 44px)\n- Sticky video player during scroll\n- Collapsible sections to maximize video space\n\n**Animations:** Minimal and purposeful\n- Smooth transitions: 150-200ms ease-out\n- Chat message slide-in: 100ms\n- Modal/drawer: 250ms cubic-bezier\n- Avoid animations during video playback (performance)\n\n---\n\n## Images\n\n**Hero Section (Landing/Login):**\n- Background: Abstract gradient mesh with screens/devices showing watch party concept\n- Overlay: Dark gradient (opacity 70%) for text legibility\n- Central focus: WatchTogether logo and tagline\n\n**Admin Dashboard:**\n- User avatars: Circular, 48px for list view, 32px for compact\n- Empty states: Illustrative graphics for \"No rooms\" or \"No users\"\n\n**Room Thumbnails:**\n- Video preview or screen share snapshot (16:9)\n- Fallback: Gradient background with room initials\n\n**Feature Illustrations:**\n- Screen sharing icon: Monitor with sharing symbol\n- Watch party icon: Multiple user avatars around play button\n- Chat icon: Speech bubbles with emoji","size_bytes":5053},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/room.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { RoomVideo } from \"@/components/room-video\";\nimport { RoomControls } from \"@/components/room-controls\";\nimport { OwnershipTransfer } from \"@/components/ownership-transfer\";\nimport { ChatPanel } from \"@/components/chat-panel\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Crown, Users } from \"lucide-react\";\nimport type { Room as RoomType, Message } from \"@shared/schema\";\n\n// Mock current user\nconst CURRENT_USER_ID = \"1\";\n\n// Mock data\nconst mockRoom: RoomType = {\n  _id: \"1\",\n  name: \"Movie Night\",\n  ownerId: \"1\",\n  ownerUsername: \"admin\",\n  mode: \"watchparty\",\n  videoUrl: \"https://youtube.com/watch?v=dQw4w9WgXcQ\",\n  participants: [\n    { userId: \"1\", username: \"admin\", joinedAt: new Date().toISOString() },\n    { userId: \"2\", username: \"john_doe\", joinedAt: new Date().toISOString() },\n    {\n      userId: \"3\",\n      username: \"jane_smith\",\n      joinedAt: new Date().toISOString(),\n    },\n  ],\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n};\n\nconst mockMessages: Message[] = [\n  {\n    _id: \"1\",\n    roomId: \"1\",\n    userId: \"1\",\n    username: \"admin\",\n    content: \"john_doe joined the room\",\n    type: \"system\",\n    createdAt: new Date(Date.now() - 600000).toISOString(),\n  },\n  {\n    _id: \"2\",\n    roomId: \"1\",\n    userId: \"1\",\n    username: \"admin\",\n    content: \"Welcome everyone!\",\n    type: \"text\",\n    createdAt: new Date(Date.now() - 300000).toISOString(),\n  },\n  {\n    _id: \"3\",\n    roomId: \"1\",\n    userId: \"2\",\n    username: \"john_doe\",\n    content: \"Thanks for the invite!\",\n    type: \"text\",\n    createdAt: new Date(Date.now() - 120000).toISOString(),\n  },\n  {\n    _id: \"4\",\n    roomId: \"1\",\n    userId: \"1\",\n    username: \"admin\",\n    content: \"jane_smith joined the room\",\n    type: \"system\",\n    createdAt: new Date(Date.now() - 60000).toISOString(),\n  },\n];\n\nexport default function Room() {\n  const params = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const [room, setRoom] = useState<RoomType>(mockRoom);\n  const [messages, setMessages] = useState<Message[]>(mockMessages);\n  const [isLoading] = useState(false);\n\n  const isOwner = room.ownerId === CURRENT_USER_ID;\n\n  const handleModeChange = (newMode: typeof room.mode) => {\n    setRoom({ ...room, mode: newMode });\n  };\n\n  const handleLeaveRoom = () => {\n    setLocation(\"/rooms\");\n  };\n\n  const handleOwnershipTransfer = (newOwnerId: string) => {\n    const newOwner = room.participants.find((p) => p.userId === newOwnerId);\n    if (newOwner) {\n      setRoom({\n        ...room,\n        ownerId: newOwnerId,\n        ownerUsername: newOwner.username,\n      });\n    }\n  };\n\n  const handleSendMessage = (content: string) => {\n    const newMessage: Message = {\n      _id: String(Date.now()),\n      roomId: room._id,\n      userId: CURRENT_USER_ID,\n      username: \"admin\",\n      content,\n      type: \"text\",\n      createdAt: new Date().toISOString(),\n    };\n    setMessages([...messages, newMessage]);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"p-4 border-b\">\n          <Skeleton className=\"h-8 w-48\" />\n        </div>\n        <div className=\"flex-1 flex\">\n          <div className=\"flex-1 p-6\">\n            <Skeleton className=\"w-full aspect-video\" />\n          </div>\n          <div className=\"w-80 border-l\">\n            <Skeleton className=\"h-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\" data-testid=\"room-page\">\n      <RoomControls\n        roomId={room._id}\n        roomName={room.name}\n        mode={room.mode}\n        isOwner={isOwner}\n        onModeChange={handleModeChange}\n        onLeave={handleLeaveRoom}\n      />\n\n      <div className=\"flex-1 flex flex-col lg:flex-row overflow-hidden\">\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Video/Screen */}\n          <div className=\"flex-1 p-6 overflow-auto\">\n            <RoomVideo mode={room.mode} videoUrl={room.videoUrl} />\n          </div>\n\n          {/* Participants */}\n          <div className=\"border-t p-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-semibold flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Participants ({room.participants.length})\n                </h3>\n                {isOwner && (\n                  <OwnershipTransfer\n                    participants={room.participants}\n                    currentOwnerId={room.ownerId}\n                    onTransfer={handleOwnershipTransfer}\n                  />\n                )}\n              </div>\n              <ScrollArea className=\"max-h-24\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {room.participants.map((participant) => (\n                    <div\n                      key={participant.userId}\n                      className=\"flex items-center gap-2 rounded-md border px-3 py-2\"\n                      data-testid={`participant-${participant.userId}`}\n                    >\n                      <Avatar className=\"h-6 w-6\">\n                        <AvatarFallback className=\"text-xs\">\n                          {participant.username.slice(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-sm font-medium\">\n                        {participant.username}\n                      </span>\n                      {participant.userId === room.ownerId && (\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"h-5 px-1\"\n                          data-testid={`owner-badge-${participant.userId}`}\n                        >\n                          <Crown className=\"h-3 w-3 text-primary\" />\n                        </Badge>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          </div>\n        </div>\n\n        {/* Chat Panel */}\n        <div className=\"h-96 lg:h-full lg:w-80 xl:w-96\">\n          <ChatPanel messages={messages} onSendMessage={handleSendMessage} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6644},"client/src/pages/rooms.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport {\n  insertRoomSchema,\n  type InsertRoom,\n  type Room,\n  type RoomMode,\n} from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Users, Crown, MonitorPlay, Video } from \"lucide-react\";\n\n// Mock data\nconst mockRooms: Room[] = [\n  {\n    _id: \"1\",\n    name: \"Movie Night\",\n    ownerId: \"1\",\n    ownerUsername: \"admin\",\n    mode: \"watchparty\",\n    videoUrl: \"https://youtube.com/watch?v=example\",\n    participants: [\n      { userId: \"1\", username: \"admin\", joinedAt: new Date().toISOString() },\n      { userId: \"2\", username: \"john_doe\", joinedAt: new Date().toISOString() },\n    ],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    _id: \"2\",\n    name: \"Code Review Session\",\n    ownerId: \"2\",\n    ownerUsername: \"john_doe\",\n    mode: \"screenshare\",\n    participants: [\n      { userId: \"2\", username: \"john_doe\", joinedAt: new Date().toISOString() },\n    ],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n];\n\nexport default function Rooms() {\n  const [, setLocation] = useLocation();\n  const [rooms, setRooms] = useState<Room[]>(mockRooms);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n\n  const form = useForm<InsertRoom>({\n    resolver: zodResolver(insertRoomSchema),\n    defaultValues: {\n      name: \"\",\n      mode: \"watchparty\",\n      videoUrl: \"\",\n    },\n  });\n\n  const selectedMode = form.watch(\"mode\");\n\n  const onCreateRoom = (data: InsertRoom) => {\n    const newRoom: Room = {\n      _id: String(Date.now()),\n      ...data,\n      ownerId: \"1\", // Mock current user\n      ownerUsername: \"admin\",\n      participants: [\n        {\n          userId: \"1\",\n          username: \"admin\",\n          joinedAt: new Date().toISOString(),\n        },\n      ],\n      isActive: true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    setRooms([newRoom, ...rooms]);\n    setCreateDialogOpen(false);\n    form.reset();\n    setLocation(`/room/${newRoom._id}`);\n  };\n\n  const joinRoom = (roomId: string) => {\n    setLocation(`/room/${roomId}`);\n  };\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"container max-w-7xl mx-auto p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">\n              Watch Rooms\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Join a room or create your own\n            </p>\n          </div>\n          <Button\n            onClick={() => setCreateDialogOpen(true)}\n            data-testid=\"button-create-room\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Room\n          </Button>\n        </div>\n\n        {/* Room Grid */}\n        {rooms.length === 0 ? (\n          <Card className=\"p-12\">\n            <div className=\"flex flex-col items-center justify-center text-center space-y-3\">\n              <Video className=\"h-12 w-12 text-muted-foreground\" />\n              <div className=\"space-y-1\">\n                <h3 className=\"font-semibold\">No active rooms</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Create a room to start watching together\n                </p>\n              </div>\n            </div>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {rooms.map((room) => (\n              <Card\n                key={room._id}\n                className=\"overflow-hidden hover-elevate\"\n                data-testid={`card-room-${room._id}`}\n              >\n                <CardHeader className=\"gap-3 space-y-0\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <CardTitle\n                      className=\"text-lg truncate\"\n                      data-testid={`text-room-name-${room._id}`}\n                    >\n                      {room.name}\n                    </CardTitle>\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"shrink-0\"\n                      data-testid={`badge-mode-${room._id}`}\n                    >\n                      {room.mode === \"screenshare\" ? (\n                        <MonitorPlay className=\"mr-1 h-3 w-3\" />\n                      ) : (\n                        <Video className=\"mr-1 h-3 w-3\" />\n                      )}\n                      {room.mode === \"screenshare\" ? \"Screen\" : \"Watch\"}\n                    </Badge>\n                  </div>\n                  <CardDescription className=\"flex items-center gap-2\">\n                    <Avatar className=\"h-5 w-5\">\n                      <AvatarFallback className=\"text-xs\">\n                        {room.ownerUsername.slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"flex items-center gap-1 text-sm\">\n                      <Crown className=\"h-3 w-3 text-primary\" />\n                      {room.ownerUsername}\n                    </span>\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Users className=\"h-4 w-4\" />\n                    <span data-testid={`text-participants-${room._id}`}>\n                      {room.participants.length}{\" \"}\n                      {room.participants.length === 1\n                        ? \"participant\"\n                        : \"participants\"}\n                    </span>\n                  </div>\n                  <Button\n                    className=\"w-full\"\n                    onClick={() => joinRoom(room._id)}\n                    data-testid={`button-join-${room._id}`}\n                  >\n                    Join Room\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create Room Dialog */}\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogContent data-testid=\"dialog-create-room\">\n            <DialogHeader>\n              <DialogTitle>Create Watch Room</DialogTitle>\n              <DialogDescription>\n                Set up a new room to watch together\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onCreateRoom)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Room Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter room name\"\n                          data-testid=\"input-room-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"mode\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-3\">\n                      <FormLabel>Room Mode</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          value={field.value}\n                          className=\"grid grid-cols-2 gap-3\"\n                        >\n                          <div>\n                            <RadioGroupItem\n                              value=\"watchparty\"\n                              id=\"watchparty\"\n                              className=\"peer sr-only\"\n                              data-testid=\"radio-watchparty\"\n                            />\n                            <Label\n                              htmlFor=\"watchparty\"\n                              className=\"flex flex-col gap-2 rounded-md border p-4 cursor-pointer hover-elevate peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary/5\"\n                            >\n                              <Video className=\"h-5 w-5\" />\n                              <div className=\"space-y-1\">\n                                <div className=\"font-medium\">Watch Party</div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  YouTube videos\n                                </div>\n                              </div>\n                            </Label>\n                          </div>\n                          <div>\n                            <RadioGroupItem\n                              value=\"screenshare\"\n                              id=\"screenshare\"\n                              className=\"peer sr-only\"\n                              data-testid=\"radio-screenshare\"\n                            />\n                            <Label\n                              htmlFor=\"screenshare\"\n                              className=\"flex flex-col gap-2 rounded-md border p-4 cursor-pointer hover-elevate peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary/5\"\n                            >\n                              <MonitorPlay className=\"h-5 w-5\" />\n                              <div className=\"space-y-1\">\n                                <div className=\"font-medium\">Screen Share</div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  Share your screen\n                                </div>\n                              </div>\n                            </Label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                {selectedMode === \"watchparty\" && (\n                  <FormField\n                    control={form.control}\n                    name=\"videoUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Video URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"https://youtube.com/watch?v=...\"\n                            data-testid=\"input-video-url\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCreateDialogOpen(false)}\n                    data-testid=\"button-cancel-create-room\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" data-testid=\"button-submit-create-room\">\n                    Create Room\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12428},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./index.html\", \"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4036},"backend/storage.ts":{"content":"import { type User, type InsertUser } from \"./schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":987},"client/src/pages/login.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginCredentials } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Video } from \"lucide-react\";\n\nexport default function Login() {\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginCredentials) => {\n    console.log(\"Login:\", data);\n    // TODO: Implement login logic\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-md bg-primary\">\n            <Video className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <div className=\"space-y-2\">\n            <CardTitle className=\"text-2xl font-semibold\">\n              Welcome to WatchTogether\n            </CardTitle>\n            <CardDescription>\n              Sign in to start watching with friends\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter your username\"\n                        data-testid=\"input-username\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        data-testid=\"input-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                data-testid=\"button-login\"\n              >\n                Sign In\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3159},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User Schema\nexport const userSchema = z.object({\n  _id: z.string(),\n  username: z.string().min(3).max(30),\n  password: z.string().min(6),\n  isAdmin: z.boolean().default(false),\n  createdAt: z.date().or(z.string()),\n});\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(30),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  isAdmin: z.boolean().optional().default(false),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\n// Room Schema\nexport const roomModeSchema = z.enum([\"screenshare\", \"watchparty\"]);\n\nexport const participantSchema = z.object({\n  userId: z.string(),\n  username: z.string(),\n  joinedAt: z.date().or(z.string()),\n});\n\nexport const roomSchema = z.object({\n  _id: z.string(),\n  name: z.string(),\n  ownerId: z.string(),\n  ownerUsername: z.string(),\n  mode: roomModeSchema,\n  videoUrl: z.string().optional(),\n  participants: z.array(participantSchema),\n  isActive: z.boolean(),\n  createdAt: z.date().or(z.string()),\n  updatedAt: z.date().or(z.string()),\n});\n\nexport const insertRoomSchema = z.object({\n  name: z.string().min(1, \"Room name is required\").max(50),\n  mode: roomModeSchema.optional().default(\"watchparty\"),\n  videoUrl: z.string().url().optional(),\n});\n\nexport const updateRoomSchema = z.object({\n  name: z.string().min(1).max(50).optional(),\n  mode: roomModeSchema.optional(),\n  videoUrl: z.string().url().optional().or(z.literal(\"\")),\n  ownerId: z.string().optional(),\n});\n\nexport type Room = z.infer<typeof roomSchema>;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type UpdateRoom = z.infer<typeof updateRoomSchema>;\nexport type RoomMode = z.infer<typeof roomModeSchema>;\nexport type Participant = z.infer<typeof participantSchema>;\n\n// Message Schema\nexport const messageSchema = z.object({\n  _id: z.string(),\n  roomId: z.string(),\n  userId: z.string(),\n  username: z.string(),\n  content: z.string(),\n  type: z.enum([\"text\", \"gif\", \"system\"]),\n  gifUrl: z.string().optional(),\n  createdAt: z.date().or(z.string()),\n});\n\nexport const insertMessageSchema = z.object({\n  roomId: z.string(),\n  content: z.string().min(1).max(1000),\n  type: z.enum([\"text\", \"gif\", \"system\"]).optional().default(\"text\"),\n  gifUrl: z.string().url().optional(),\n});\n\nexport type Message = z.infer<typeof messageSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\n// WebSocket Event Types\nexport const wsEventSchema = z.object({\n  type: z.enum([\n    \"message\",\n    \"user_joined\",\n    \"user_left\",\n    \"mode_changed\",\n    \"video_sync\",\n    \"ownership_transferred\",\n    \"room_updated\",\n  ]),\n  data: z.any(),\n  roomId: z.string().optional(),\n  userId: z.string().optional(),\n  timestamp: z.date().or(z.string()).optional(),\n});\n\nexport type WSEvent = z.infer<typeof wsEventSchema>;\n\n// Video Sync Event\nexport const videoSyncSchema = z.object({\n  action: z.enum([\"play\", \"pause\", \"seek\"]),\n  currentTime: z.number(),\n  videoUrl: z.string().optional(),\n});\n\nexport type VideoSync = z.infer<typeof videoSyncSchema>;\n\n// Auth Response\nexport const authResponseSchema = z.object({\n  token: z.string(),\n  user: z.object({\n    _id: z.string(),\n    username: z.string(),\n    isAdmin: z.boolean(),\n  }),\n});\n\nexport type AuthResponse = z.infer<typeof authResponseSchema>;\n","size_bytes":3611},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport Login from \"@/pages/login\";\nimport Rooms from \"@/pages/rooms\";\nimport Room from \"@/pages/room\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/rooms\" component={Rooms} />\n      <Route path=\"/room/:id\" component={Room} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/\" component={Rooms} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const sidebarStyle = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider defaultTheme=\"dark\">\n          <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <header className=\"flex items-center justify-between gap-2 p-3 border-b\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <ThemeToggle />\n                </header>\n                <main className=\"flex-1 overflow-hidden\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2050},"client/src/components/room-controls.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  MonitorPlay,\n  Video,\n  Link as LinkIcon,\n  Copy,\n  LogOut,\n  Settings,\n} from \"lucide-react\";\nimport type { RoomMode } from \"@shared/schema\";\n\ninterface RoomControlsProps {\n  roomId: string;\n  roomName: string;\n  mode: RoomMode;\n  isOwner: boolean;\n  onModeChange?: (mode: RoomMode) => void;\n  onLeave?: () => void;\n}\n\nexport function RoomControls({\n  roomId,\n  roomName,\n  mode,\n  isOwner,\n  onModeChange,\n  onLeave,\n}: RoomControlsProps) {\n  const { toast } = useToast();\n  const [selectedMode, setSelectedMode] = useState<RoomMode>(mode);\n\n  const inviteLink = `${window.location.origin}/room/${roomId}`;\n\n  const copyInviteLink = async () => {\n    await navigator.clipboard.writeText(inviteLink);\n    toast({\n      title: \"Link copied!\",\n      description: \"Invite link copied to clipboard\",\n    });\n  };\n\n  const handleModeChange = (newMode: RoomMode) => {\n    setSelectedMode(newMode);\n    onModeChange?.(newMode);\n    toast({\n      title: \"Mode changed\",\n      description: `Switched to ${newMode === \"screenshare\" ? \"screen share\" : \"watch party\"} mode`,\n    });\n  };\n\n  return (\n    <div className=\"flex flex-wrap items-center gap-3 p-4 border-b\">\n      <div className=\"flex-1 min-w-0\">\n        <h2 className=\"text-lg font-semibold truncate\" data-testid=\"text-room-name\">\n          {roomName}\n        </h2>\n      </div>\n      \n      <div className=\"flex flex-wrap items-center gap-2\">\n        <Badge variant=\"secondary\" data-testid=\"badge-current-mode\">\n          {mode === \"screenshare\" ? (\n            <MonitorPlay className=\"mr-1 h-3 w-3\" />\n          ) : (\n            <Video className=\"mr-1 h-3 w-3\" />\n          )}\n          {mode === \"screenshare\" ? \"Screen Share\" : \"Watch Party\"}\n        </Badge>\n\n        {isOwner && (\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-room-settings\"\n              >\n                <Settings className=\"mr-1 h-4 w-4\" />\n                Settings\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-64\" data-testid=\"popover-room-settings\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Room Mode</h4>\n                  <RadioGroup\n                    value={selectedMode}\n                    onValueChange={(value) => handleModeChange(value as RoomMode)}\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem\n                        value=\"watchparty\"\n                        id=\"mode-watchparty\"\n                        data-testid=\"radio-mode-watchparty\"\n                      />\n                      <Label htmlFor=\"mode-watchparty\" className=\"flex items-center gap-2 cursor-pointer\">\n                        <Video className=\"h-4 w-4\" />\n                        Watch Party\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem\n                        value=\"screenshare\"\n                        id=\"mode-screenshare\"\n                        data-testid=\"radio-mode-screenshare\"\n                      />\n                      <Label htmlFor=\"mode-screenshare\" className=\"flex items-center gap-2 cursor-pointer\">\n                        <MonitorPlay className=\"h-4 w-4\" />\n                        Screen Share\n                      </Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n              </div>\n            </PopoverContent>\n          </Popover>\n        )}\n\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={copyInviteLink}\n          data-testid=\"button-copy-invite\"\n        >\n          <Copy className=\"mr-1 h-4 w-4\" />\n          Invite\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onLeave}\n          data-testid=\"button-leave-room\"\n        >\n          <LogOut className=\"mr-1 h-4 w-4\" />\n          Leave\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4580},"backend/middleware/validateRequest.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { validationResult } from 'express-validator';\n\nexport const validateRequest = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const errors = validationResult(req);\n  \n  if (!errors.isEmpty()) {\n    return res.status(400).json({ \n      message: 'Validation error',\n      errors: errors.array() \n    });\n  }\n  \n  next();\n};\n","size_bytes":406},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"backend/websocket.ts":{"content":"import { Server as HTTPServer } from 'http';\nimport { WebSocketServer, WebSocket } from 'ws';\nimport jwt from 'jsonwebtoken';\nimport url from 'url';\nimport { Room } from './models/Room';\n\nconst JWT_SECRET = process.env.SESSION_SECRET || 'your-secret-key';\n\ninterface AuthenticatedWebSocket extends WebSocket {\n  userId?: string;\n  username?: string;\n  roomId?: string;\n  isAlive?: boolean;\n}\n\ninterface WSMessage {\n  type: 'message' | 'user_joined' | 'user_left' | 'mode_changed' | 'video_sync' | 'ownership_transferred' | 'room_updated';\n  data: any;\n  roomId?: string;\n  userId?: string;\n  username?: string;\n  timestamp?: string;\n}\n\n// Store connections by roomId\nconst roomConnections = new Map<string, Set<AuthenticatedWebSocket>>();\n\nexport function setupWebSocket(httpServer: HTTPServer) {\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  // Heartbeat to detect broken connections\n  const interval = setInterval(() => {\n    wss.clients.forEach((ws) => {\n      const client = ws as AuthenticatedWebSocket;\n      if (client.isAlive === false) {\n        return client.terminate();\n      }\n      client.isAlive = false;\n      client.ping();\n    });\n  }, 30000);\n\n  wss.on('close', () => {\n    clearInterval(interval);\n  });\n\n  wss.on('connection', (ws: AuthenticatedWebSocket, req) => {\n    ws.isAlive = true;\n    \n    ws.on('pong', () => {\n      ws.isAlive = true;\n    });\n\n    // Authenticate via JWT from query param\n    const queryParams = url.parse(req.url || '', true).query;\n    const token = queryParams.token as string;\n\n    if (!token) {\n      ws.close(4001, 'Authentication token required');\n      return;\n    }\n\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as {\n        _id: string;\n        username: string;\n        isAdmin: boolean;\n      };\n\n      ws.userId = decoded._id;\n      ws.username = decoded.username;\n\n      console.log(`WebSocket connected: ${decoded.username} (${decoded._id})`);\n    } catch (error) {\n      ws.close(4002, 'Invalid authentication token');\n      return;\n    }\n\n    // Handle incoming messages\n    ws.on('message', (data) => {\n      try {\n        const message: WSMessage = JSON.parse(data.toString());\n\n        switch (message.type) {\n          case 'join_room':\n            handleJoinRoom(ws, message.data.roomId);\n            break;\n\n          case 'leave_room':\n            handleLeaveRoom(ws, message.data.roomId);\n            break;\n\n          case 'message':\n            broadcastToRoom(ws.roomId!, {\n              type: 'message',\n              data: message.data,\n              userId: ws.userId,\n              username: ws.username,\n              timestamp: new Date().toISOString(),\n            });\n            break;\n\n          case 'video_sync':\n            broadcastToRoom(ws.roomId!, {\n              type: 'video_sync',\n              data: message.data,\n              userId: ws.userId,\n              username: ws.username,\n              timestamp: new Date().toISOString(),\n            }, ws);\n            break;\n\n          case 'mode_changed':\n            broadcastToRoom(ws.roomId!, {\n              type: 'mode_changed',\n              data: message.data,\n              userId: ws.userId,\n              username: ws.username,\n              timestamp: new Date().toISOString(),\n            });\n            break;\n\n          case 'ownership_transferred':\n            broadcastToRoom(ws.roomId!, {\n              type: 'ownership_transferred',\n              data: message.data,\n              userId: ws.userId,\n              username: ws.username,\n              timestamp: new Date().toISOString(),\n            });\n            break;\n\n          case 'room_updated':\n            broadcastToRoom(ws.roomId!, {\n              type: 'room_updated',\n              data: message.data,\n              userId: ws.userId,\n              username: ws.username,\n              timestamp: new Date().toISOString(),\n            });\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    // Handle disconnect\n    ws.on('close', () => {\n      if (ws.roomId) {\n        handleLeaveRoom(ws, ws.roomId);\n      }\n      console.log(`WebSocket disconnected: ${ws.username} (${ws.userId})`);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n\n  console.log('✅ WebSocket server initialized on path /ws');\n  return wss;\n}\n\nfunction handleJoinRoom(ws: AuthenticatedWebSocket, roomId: string) {\n  // Leave previous room if any\n  if (ws.roomId) {\n    handleLeaveRoom(ws, ws.roomId);\n  }\n\n  ws.roomId = roomId;\n\n  // Add to room connections\n  if (!roomConnections.has(roomId)) {\n    roomConnections.set(roomId, new Set());\n  }\n  roomConnections.get(roomId)!.add(ws);\n\n  console.log(`${ws.username} joined room ${roomId}`);\n\n  // Notify others in the room\n  broadcastToRoom(roomId, {\n    type: 'user_joined',\n    data: {\n      userId: ws.userId,\n      username: ws.username,\n    },\n    timestamp: new Date().toISOString(),\n  }, ws);\n}\n\nasync function handleLeaveRoom(ws: AuthenticatedWebSocket, roomId: string) {\n  const roomClients = roomConnections.get(roomId);\n  if (roomClients) {\n    roomClients.delete(ws);\n    if (roomClients.size === 0) {\n      roomConnections.delete(roomId);\n    }\n  }\n\n  console.log(`${ws.username} left room ${roomId}`);\n\n  // Update database to remove participant\n  try {\n    await Room.findByIdAndUpdate(\n      roomId,\n      { $pull: { participants: { userId: ws.userId } } }\n    );\n  } catch (error) {\n    console.error('Error removing participant from database:', error);\n  }\n\n  // Notify others in the room\n  broadcastToRoom(roomId, {\n    type: 'user_left',\n    data: {\n      userId: ws.userId,\n      username: ws.username,\n    },\n    timestamp: new Date().toISOString(),\n  });\n\n  ws.roomId = undefined;\n}\n\nfunction broadcastToRoom(roomId: string, message: WSMessage, excludeClient?: AuthenticatedWebSocket) {\n  const roomClients = roomConnections.get(roomId);\n  if (!roomClients) return;\n\n  const messageStr = JSON.stringify(message);\n\n  roomClients.forEach((client) => {\n    if (client !== excludeClient && client.readyState === WebSocket.OPEN) {\n      client.send(messageStr);\n    }\n  });\n}\n","size_bytes":6226},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"dark\" ? (\n        <Sun className=\"h-5 w-5\" />\n      ) : (\n        <Moon className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":547},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"backend/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2245},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"backend/models/Room.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IParticipant {\n  userId: string;\n  username: string;\n  joinedAt: Date;\n}\n\nexport interface IRoom extends Document {\n  name: string;\n  ownerId: mongoose.Types.ObjectId;\n  ownerUsername: string;\n  mode: 'screenshare' | 'watchparty';\n  videoUrl?: string;\n  participants: IParticipant[];\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst ParticipantSchema = new Schema({\n  userId: {\n    type: String,\n    required: true,\n  },\n  username: {\n    type: String,\n    required: true,\n  },\n  joinedAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, { _id: false });\n\nconst RoomSchema = new Schema<IRoom>({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 50,\n  },\n  ownerId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  ownerUsername: {\n    type: String,\n    required: true,\n  },\n  mode: {\n    type: String,\n    enum: ['screenshare', 'watchparty'],\n    default: 'watchparty',\n  },\n  videoUrl: {\n    type: String,\n    default: '',\n  },\n  participants: [ParticipantSchema],\n  isActive: {\n    type: Boolean,\n    default: true,\n  },\n}, {\n  timestamps: true,\n});\n\nexport const Room = mongoose.model<IRoom>('Room', RoomSchema);\n","size_bytes":1268},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/room-video.tsx":{"content":"import { MonitorPlay, Tv } from \"lucide-react\";\nimport type { RoomMode } from \"@shared/schema\";\n\ninterface RoomVideoProps {\n  mode: RoomMode;\n  videoUrl?: string;\n}\n\nexport function RoomVideo({ mode, videoUrl }: RoomVideoProps) {\n  // Extract YouTube video ID from URL\n  const getYouTubeId = (url: string) => {\n    const match = url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/);\n    return match ? match[1] : null;\n  };\n\n  const youtubeId = videoUrl ? getYouTubeId(videoUrl) : null;\n\n  return (\n    <div className=\"w-full bg-black rounded-md overflow-hidden\" data-testid=\"room-video-container\">\n      <div className=\"relative w-full\" style={{ paddingTop: \"56.25%\" }}>\n        {mode === \"watchparty\" && youtubeId ? (\n          <iframe\n            className=\"absolute inset-0 w-full h-full\"\n            src={`https://www.youtube.com/embed/${youtubeId}?enablejsapi=1`}\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n            data-testid=\"youtube-player\"\n          />\n        ) : (\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center gap-4 text-muted-foreground\">\n            {mode === \"screenshare\" ? (\n              <>\n                <MonitorPlay className=\"h-16 w-16\" />\n                <p className=\"text-lg\" data-testid=\"text-screenshare-waiting\">\n                  Waiting for screen share...\n                </p>\n              </>\n            ) : (\n              <>\n                <Tv className=\"h-16 w-16\" />\n                <p className=\"text-lg\" data-testid=\"text-video-waiting\">\n                  No video playing\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1773},"backend/middleware/admin.ts":{"content":"import { Response, NextFunction } from 'express';\nimport { AuthRequest } from './auth';\n\nexport const requireAdmin = (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.user) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n\n  if (!req.user.isAdmin) {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n\n  next();\n};\n","size_bytes":397},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"backend/models/User.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IUser extends Document {\n  username: string;\n  password: string;\n  isAdmin: boolean;\n  avatarUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst UserSchema = new Schema<IUser>({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 30,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  isAdmin: {\n    type: Boolean,\n    default: false,\n  },\n  avatarUrl: {\n    type: String,\n    default: '',\n  },\n}, {\n  timestamps: true,\n});\n\nexport const User = mongoose.model<IUser>('User', UserSchema);\n","size_bytes":668},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"backend/db.ts":{"content":"import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/watchtogether';\n\nexport async function connectDB() {\n  try {\n    await mongoose.connect(MONGODB_URI);\n    console.log('✅ MongoDB connected successfully');\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    process.exit(1);\n  }\n}\n\nmongoose.connection.on('error', (error) => {\n  console.error('MongoDB connection error:', error);\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.log('MongoDB disconnected');\n});\n\nexport default mongoose;\n","size_bytes":591},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"watchtogether-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(storageKey);\n    return (stored as Theme) || defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1524},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"backend/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.SESSION_SECRET || 'your-secret-key';\n\nexport interface AuthRequest extends Request {\n  user?: {\n    _id: string;\n    username: string;\n    isAdmin: boolean;\n  };\n}\n\nexport const authenticateToken = (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.cookies?.token;\n\n    if (!token) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const decoded = jwt.verify(token, JWT_SECRET) as {\n      _id: string;\n      username: string;\n      isAdmin: boolean;\n    };\n\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid or expired token' });\n  }\n};\n","size_bytes":802},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chat-message.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport type { Message } from \"@shared/schema\";\n\ninterface ChatMessageProps {\n  message: Message;\n}\n\nexport function ChatMessage({ message }: ChatMessageProps) {\n  const timestamp = new Date(message.createdAt).toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  return (\n    <div\n      className=\"group flex gap-3 px-4 py-2 hover-elevate\"\n      data-testid={`message-${message._id}`}\n    >\n      <Avatar className=\"h-8 w-8 shrink-0\">\n        <AvatarFallback className=\"text-xs\">\n          {message.username.slice(0, 2).toUpperCase()}\n        </AvatarFallback>\n      </Avatar>\n      <div className=\"flex-1 min-w-0 space-y-1\">\n        <div className=\"flex items-baseline gap-2\">\n          <span\n            className=\"font-medium text-sm\"\n            data-testid={`text-message-username-${message._id}`}\n          >\n            {message.username}\n          </span>\n          <span\n            className=\"text-xs text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity\"\n            data-testid={`text-message-time-${message._id}`}\n          >\n            {timestamp}\n          </span>\n        </div>\n        {message.type === \"gif\" && message.gifUrl ? (\n          <img\n            src={message.gifUrl}\n            alt=\"GIF\"\n            className=\"max-w-xs rounded-md\"\n            data-testid={`img-message-gif-${message._id}`}\n          />\n        ) : (\n          <p\n            className=\"text-sm break-words\"\n            data-testid={`text-message-content-${message._id}`}\n          >\n            {message.content}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1680},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/app-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Video,\n  Users,\n  Shield,\n  Crown,\n  Circle,\n  LogOut,\n} from \"lucide-react\";\nimport type { Room } from \"@shared/schema\";\n\n// Mock current user\nconst CURRENT_USER = {\n  _id: \"1\",\n  username: \"admin\",\n  isAdmin: true,\n};\n\n// Mock active rooms\nconst mockRooms: Room[] = [\n  {\n    _id: \"1\",\n    name: \"Movie Night\",\n    ownerId: \"1\",\n    ownerUsername: \"admin\",\n    mode: \"watchparty\",\n    participants: [\n      { userId: \"1\", username: \"admin\", joinedAt: new Date().toISOString() },\n      { userId: \"2\", username: \"john_doe\", joinedAt: new Date().toISOString() },\n    ],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    _id: \"2\",\n    name: \"Code Review\",\n    ownerId: \"2\",\n    ownerUsername: \"john_doe\",\n    mode: \"screenshare\",\n    participants: [\n      { userId: \"2\", username: \"john_doe\", joinedAt: new Date().toISOString() },\n    ],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <Sidebar data-testid=\"app-sidebar\">\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary\">\n            <Video className=\"h-4 w-4 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-sm font-semibold\">WatchTogether</h2>\n            <p className=\"text-xs text-muted-foreground\">Watch with friends</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent className=\"px-2\">\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton\n                  asChild\n                  isActive={isActive(\"/rooms\")}\n                  data-testid=\"nav-rooms\"\n                >\n                  <Link href=\"/rooms\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>All Rooms</span>\n                  </Link>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n              {CURRENT_USER.isAdmin && (\n                <SidebarMenuItem>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={isActive(\"/admin\")}\n                    data-testid=\"nav-admin\"\n                  >\n                    <Link href=\"/admin\">\n                      <Shield className=\"h-4 w-4\" />\n                      <span>Admin Panel</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              )}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <Separator className=\"my-2\" />\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Active Rooms</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {mockRooms.length === 0 ? (\n                <div className=\"px-3 py-6 text-center text-sm text-muted-foreground\">\n                  No active rooms\n                </div>\n              ) : (\n                mockRooms.map((room) => (\n                  <SidebarMenuItem key={room._id}>\n                    <SidebarMenuButton\n                      asChild\n                      isActive={isActive(`/room/${room._id}`)}\n                      data-testid={`nav-room-${room._id}`}\n                    >\n                      <Link href={`/room/${room._id}`}>\n                        <Circle\n                          className={`h-2 w-2 ${\n                            room.isActive\n                              ? \"fill-status-online text-status-online\"\n                              : \"fill-muted text-muted\"\n                          }`}\n                        />\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"truncate text-sm\">{room.name}</div>\n                          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                            {room.ownerId === CURRENT_USER._id && (\n                              <Crown className=\"h-3 w-3\" />\n                            )}\n                            <span className=\"truncate\">\n                              {room.participants.length}{\" \"}\n                              {room.participants.length === 1\n                                ? \"person\"\n                                : \"people\"}\n                            </span>\n                          </div>\n                        </div>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))\n              )}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-2\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton className=\"w-full\" data-testid=\"nav-user-profile\">\n              <Avatar className=\"h-6 w-6\">\n                <AvatarFallback className=\"text-xs\">\n                  {CURRENT_USER.username.slice(0, 2).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 text-left min-w-0\">\n                <div className=\"text-sm font-medium truncate\">\n                  {CURRENT_USER.username}\n                </div>\n                {CURRENT_USER.isAdmin && (\n                  <Badge variant=\"secondary\" className=\"h-4 px-1 text-xs\">\n                    Admin\n                  </Badge>\n                )}\n              </div>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n          <SidebarMenuItem>\n            <SidebarMenuButton asChild data-testid=\"nav-logout\">\n              <Link href=\"/login\">\n                <LogOut className=\"h-4 w-4\" />\n                <span>Sign Out</span>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":6608},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/index.ts":{"content":"export * from \"../backend/index.js\";\n","size_bytes":37},"src/hooks/useUsers.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { api } from '@/lib/api';\nimport type { User } from '@/lib/schema';\n\nexport function useUsers() {\n  return useQuery<User[]>({\n    queryKey: ['admin', 'users'],\n    queryFn: async () => {\n      const response = await api.admin.getUsers();\n      return response as User[];\n    },\n  });\n}\n\nexport function useCreateUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: { username: string; password: string; isAdmin?: boolean }) =>\n      api.admin.createUser(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n  });\n}\n\nexport function useUpdateUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: { username?: string; password?: string; isAdmin?: boolean } }) =>\n      api.admin.updateUser(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n  });\n}\n\nexport function useDeleteUser() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => api.admin.deleteUser(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n  });\n}\n","size_bytes":1328},"src/components/room-video.tsx":{"content":"import { useEffect } from \"react\";\nimport { MonitorPlay, Tv, MonitorUp, MonitorOff } from \"lucide-react\";\nimport type { RoomMode, VideoSync } from \"@/lib/schema\";\nimport { useYouTubePlayer } from \"@/hooks/useYouTubePlayer\";\nimport { useScreenShare } from \"@/hooks/useScreenShare\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface RoomVideoProps {\n  mode: RoomMode;\n  videoUrl?: string;\n  isOwner: boolean;\n  onVideoSync?: (syncData: VideoSync) => void;\n  videoSyncEvent?: VideoSync | null;\n}\n\nexport function RoomVideo({ mode, videoUrl, isOwner, onVideoSync, videoSyncEvent }: RoomVideoProps) {\n  // Extract YouTube video ID from URL\n  const getYouTubeId = (url: string) => {\n    const match = url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/);\n    return match ? match[1] : null;\n  };\n\n  const youtubeId = videoUrl ? getYouTubeId(videoUrl) : null;\n\n  const { playerContainerRef, isReady, syncVideo } = useYouTubePlayer({\n    videoId: youtubeId,\n    isOwner,\n    onStateChange: (action, currentTime) => {\n      if (isOwner && onVideoSync) {\n        onVideoSync({\n          action,\n          currentTime,\n          videoUrl,\n        });\n      }\n    },\n  });\n\n  const { isSharing, error, startScreenShare, stopScreenShare, attachVideoElement } = useScreenShare();\n\n  // Handle incoming video sync events (for non-owners)\n  useEffect(() => {\n    if (!isOwner && videoSyncEvent && isReady) {\n      syncVideo(videoSyncEvent.action, videoSyncEvent.currentTime);\n    }\n  }, [isOwner, videoSyncEvent, isReady, syncVideo]);\n\n  return (\n    <div className=\"w-full bg-black rounded-md overflow-hidden\" data-testid=\"room-video-container\">\n      <div className=\"relative w-full\" style={{ paddingTop: \"56.25%\" }}>\n        {mode === \"watchparty\" && youtubeId ? (\n          <div \n            ref={playerContainerRef} \n            className=\"absolute inset-0 w-full h-full\"\n            data-testid=\"youtube-player\"\n          />\n        ) : mode === \"screenshare\" ? (\n          <>\n            {isSharing ? (\n              <video\n                ref={attachVideoElement}\n                autoPlay\n                playsInline\n                className=\"absolute inset-0 w-full h-full object-contain\"\n                data-testid=\"screenshare-video\"\n              />\n            ) : (\n              <div className=\"absolute inset-0 flex flex-col items-center justify-center gap-4 text-muted-foreground\">\n                <MonitorPlay className=\"h-16 w-16\" />\n                {isOwner ? (\n                  <>\n                    <p className=\"text-lg\" data-testid=\"text-screenshare-prompt\">\n                      Share your screen with the room\n                    </p>\n                    <Button\n                      onClick={startScreenShare}\n                      className=\"gap-2\"\n                      data-testid=\"button-start-screenshare\"\n                    >\n                      <MonitorUp className=\"h-5 w-5\" />\n                      Start Screen Share\n                    </Button>\n                    {error && (\n                      <p className=\"text-sm text-destructive\" data-testid=\"text-screenshare-error\">\n                        {error}\n                      </p>\n                    )}\n                  </>\n                ) : (\n                  <p className=\"text-lg\" data-testid=\"text-screenshare-waiting\">\n                    Waiting for owner to share screen...\n                  </p>\n                )}\n              </div>\n            )}\n            {isSharing && isOwner && (\n              <div className=\"absolute bottom-4 right-4 z-10\">\n                <Button\n                  onClick={stopScreenShare}\n                  variant=\"destructive\"\n                  className=\"gap-2\"\n                  data-testid=\"button-stop-screenshare\"\n                >\n                  <MonitorOff className=\"h-5 w-5\" />\n                  Stop Sharing\n                </Button>\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center gap-4 text-muted-foreground\">\n            <Tv className=\"h-16 w-16\" />\n            <p className=\"text-lg\" data-testid=\"text-video-waiting\">\n              No video playing\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4294},"src/hooks/useRooms.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { api } from '@/lib/api';\nimport type { Room } from '@/lib/schema';\n\nexport function useRooms() {\n  return useQuery<Room[]>({\n    queryKey: ['rooms'],\n    queryFn: () => api.rooms.getAll(),\n  });\n}\n\nexport function useRoom(roomId: string | undefined) {\n  return useQuery<Room>({\n    queryKey: ['rooms', roomId],\n    queryFn: () => api.rooms.getById(roomId!),\n    enabled: !!roomId,\n  });\n}\n\nexport function useCreateRoom() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: { name: string; mode?: 'screenshare' | 'watchparty'; videoUrl?: string }) =>\n      api.rooms.create(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['rooms'] });\n    },\n  });\n}\n\nexport function useUpdateRoom(roomId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: { name?: string; mode?: 'screenshare' | 'watchparty'; videoUrl?: string }) =>\n      api.rooms.update(roomId, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['rooms', roomId] });\n      queryClient.invalidateQueries({ queryKey: ['rooms'] });\n    },\n  });\n}\n\nexport function useJoinRoom(roomId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => api.rooms.join(roomId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['rooms', roomId] });\n    },\n  });\n}\n\nexport function useLeaveRoom(roomId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => api.rooms.leave(roomId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['rooms', roomId] });\n    },\n  });\n}\n\nexport function useTransferOwnership(roomId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (newOwnerId: string) => api.rooms.transfer(roomId, newOwnerId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['rooms', roomId] });\n    },\n  });\n}\n\nexport function useDeleteRoom(roomId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: () => api.rooms.delete(roomId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['rooms'] });\n    },\n  });\n}\n","size_bytes":2328},"src/pages/rooms.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport {\n  insertRoomSchema,\n  type InsertRoom,\n} from \"@/lib/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useRooms, useCreateRoom } from \"@/hooks/useRooms\";\nimport type { Room } from \"@/lib/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Users, Crown, Video, Check } from \"lucide-react\";\n\nexport default function Rooms() {\n  const [location, setLocation] = useLocation();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n\n  const { data: rooms, isLoading } = useRooms();\n  const roomsList = (rooms || []) as Room[];\n  const createRoomMutation = useCreateRoom();\n\n  const form = useForm<InsertRoom>({\n    resolver: zodResolver(insertRoomSchema),\n    defaultValues: {\n      name: \"\",\n      videoUrl: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isAuthenticated, authLoading, setLocation]);\n\n  if (authLoading || !isAuthenticated) {\n    return null;\n  }\n\n  const onCreateRoom = async (data: InsertRoom) => {\n    try {\n      const newRoom = await createRoomMutation.mutateAsync(data) as Room;\n      setCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Room created!\",\n        description: `\"${data.name}\" has been created successfully.`,\n      });\n      setLocation(`/room/${newRoom._id}`);\n    } catch (error: any) {\n      toast({\n        title: \"Failed to create room\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const joinRoom = (roomId: string) => {\n    setLocation(`/room/${roomId}`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-full overflow-auto\">\n        <div className=\"container max-w-7xl mx-auto p-6 space-y-6\">\n          <div className=\"space-y-1\">\n            <Skeleton className=\"h-9 w-48\" />\n            <Skeleton className=\"h-5 w-72\" />\n          </div>\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-10 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"container max-w-7xl mx-auto p-6 space-y-6\">\n        <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">\n              Watch Rooms\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Join a room or create your own\n            </p>\n          </div>\n          <Button\n            onClick={() => setCreateDialogOpen(true)}\n            data-testid=\"button-create-room\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Room\n          </Button>\n        </div>\n\n        {roomsList.length === 0 ? (\n          <Card className=\"p-12\">\n            <div className=\"flex flex-col items-center justify-center text-center space-y-3\">\n              <Video className=\"h-12 w-12 text-muted-foreground\" />\n              <div className=\"space-y-1\">\n                <h3 className=\"font-semibold\">No active rooms</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Create a room to start watching together\n                </p>\n              </div>\n            </div>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {roomsList.map((room: Room) => {\n              const isUserInRoom = user && room.participants.some((p: any) => p.userId === user._id);\n              \n              return (\n                <Card\n                  key={room._id}\n                  className=\"overflow-hidden hover-elevate\"\n                  data-testid={`card-room-${room._id}`}\n                >\n                  <CardHeader className=\"gap-3 space-y-0\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <CardTitle\n                        className=\"text-lg truncate\"\n                        data-testid={`text-room-name-${room._id}`}\n                      >\n                        {room.name}\n                      </CardTitle>\n                      <div className=\"flex gap-1 shrink-0\">\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"shrink-0\"\n                          data-testid={`badge-mode-${room._id}`}\n                        >\n                          <Video className=\"mr-1 h-3 w-3\" />\n                          {room.mode === \"screenshare\" ? \"Screen\" : \"Watch\"}\n                        </Badge>\n                        {isUserInRoom && (\n                          <Badge\n                            variant=\"default\"\n                            className=\"shrink-0\"\n                            data-testid={`badge-joined-${room._id}`}\n                          >\n                            <Check className=\"mr-1 h-3 w-3\" />\n                            Joined\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <CardDescription className=\"flex items-center gap-2\">\n                      <Avatar className=\"h-5 w-5\">\n                        <AvatarFallback className=\"text-xs\">\n                          {room.ownerUsername.slice(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"flex items-center gap-1 text-sm\">\n                        <Crown className=\"h-3 w-3 text-primary\" />\n                        {room.ownerUsername}\n                      </span>\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Users className=\"h-4 w-4\" />\n                      <span data-testid={`text-participants-${room._id}`}>\n                        {room.participants.length}{\" \"}\n                        {room.participants.length === 1\n                          ? \"participant\"\n                          : \"participants\"}\n                      </span>\n                    </div>\n                    <Button\n                      className=\"w-full\"\n                      onClick={() => joinRoom(room._id)}\n                      data-testid={`button-join-${room._id}`}\n                    >\n                      {isUserInRoom ? \"Rejoin Room\" : \"Join Room\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogContent data-testid=\"dialog-create-room\">\n            <DialogHeader>\n              <DialogTitle>Create Watch Room</DialogTitle>\n              <DialogDescription>\n                Create a room to watch together. You can change the mode and video after creation.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onCreateRoom)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Room Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter room name\"\n                          data-testid=\"input-room-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCreateDialogOpen(false)}\n                    data-testid=\"button-cancel-create-room\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    data-testid=\"button-submit-create-room\"\n                    disabled={createRoomMutation.isPending}\n                  >\n                    {createRoomMutation.isPending ? \"Creating...\" : \"Create Room\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9968},"src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"watchtogether-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(storageKey);\n    return (stored as Theme) || defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1524},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"src/hooks/useMessages.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { api } from '@/lib/api';\nimport type { Message } from '@/lib/schema';\n\nexport function useMessages(roomId: string | undefined) {\n  return useQuery<Message[]>({\n    queryKey: ['rooms', roomId, 'messages'],\n    queryFn: () => api.messages.getByRoomId(roomId!),\n    enabled: !!roomId,\n  });\n}\n\nexport function useSendMessage(roomId: string) {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (data: { content: string; type?: 'text' | 'gif' | 'system'; gifUrl?: string }) =>\n      api.messages.send(roomId, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['rooms', roomId, 'messages'] });\n    },\n  });\n}\n","size_bytes":748},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"src/lib/api.ts":{"content":"const API_BASE = '/api';\n\nexport class APIError extends Error {\n  constructor(\n    message: string,\n    public status: number,\n    public data?: any\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\nasync function handleResponse<T>(response: Response): Promise<T> {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: response.statusText }));\n    throw new APIError(error.message || 'Request failed', response.status, error);\n  }\n  return response.json();\n}\n\nexport const api = {\n  auth: {\n    login: (username: string, password: string) =>\n      fetch(`${API_BASE}/auth/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ username, password }),\n      }).then(handleResponse),\n\n    logout: () =>\n      fetch(`${API_BASE}/auth/logout`, {\n        method: 'POST',\n        credentials: 'include',\n      }).then(handleResponse),\n\n    getMe: () =>\n      fetch(`${API_BASE}/auth/me`, {\n        credentials: 'include',\n      }).then(handleResponse),\n  },\n\n  profile: {\n    update: (data: { username?: string; avatarUrl?: string }) =>\n      fetch(`${API_BASE}/profile`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      }).then(handleResponse),\n\n    changePassword: (data: { currentPassword: string; newPassword: string }) =>\n      fetch(`${API_BASE}/profile/password`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      }).then(handleResponse),\n  },\n\n  rooms: {\n    getAll: () =>\n      fetch(`${API_BASE}/rooms`, {\n        credentials: 'include',\n      }).then(handleResponse),\n\n    getById: (id: string) =>\n      fetch(`${API_BASE}/rooms/${id}`, {\n        credentials: 'include',\n      }).then(handleResponse),\n\n    create: (data: { name: string; videoUrl?: string }) =>\n      fetch(`${API_BASE}/rooms`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      }).then(handleResponse),\n\n    update: (id: string, data: { name?: string; mode?: 'screenshare' | 'watchparty'; videoUrl?: string }) =>\n      fetch(`${API_BASE}/rooms/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      }).then(handleResponse),\n\n    join: (id: string) =>\n      fetch(`${API_BASE}/rooms/${id}/join`, {\n        method: 'POST',\n        credentials: 'include',\n      }).then(handleResponse),\n\n    leave: (id: string) =>\n      fetch(`${API_BASE}/rooms/${id}/leave`, {\n        method: 'POST',\n        credentials: 'include',\n      }).then(handleResponse),\n\n    transfer: (id: string, newOwnerId: string) =>\n      fetch(`${API_BASE}/rooms/${id}/transfer`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ newOwnerId }),\n      }).then(handleResponse),\n\n    delete: (id: string) =>\n      fetch(`${API_BASE}/rooms/${id}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      }).then(handleResponse),\n  },\n\n  messages: {\n    getByRoomId: (roomId: string) =>\n      fetch(`${API_BASE}/rooms/${roomId}/messages`, {\n        credentials: 'include',\n      }).then(handleResponse),\n\n    send: (roomId: string, data: { content: string; type?: 'text' | 'gif' | 'system'; gifUrl?: string }) =>\n      fetch(`${API_BASE}/rooms/${roomId}/messages`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      }).then(handleResponse),\n  },\n\n  admin: {\n    getUsers: () =>\n      fetch(`${API_BASE}/admin/users`, {\n        credentials: 'include',\n      }).then(handleResponse),\n\n    createUser: (data: { username: string; password: string; isAdmin?: boolean }) =>\n      fetch(`${API_BASE}/admin/users`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      }).then(handleResponse),\n\n    updateUser: (id: string, data: { username?: string; password?: string; isAdmin?: boolean }) =>\n      fetch(`${API_BASE}/admin/users/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      }).then(handleResponse),\n\n    deleteUser: (id: string) =>\n      fetch(`${API_BASE}/admin/users/${id}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      }).then(handleResponse),\n  },\n};\n","size_bytes":4815},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"src/lib/schema.ts":{"content":"import { z } from \"zod\";\n\n// User Schema\nexport const userSchema = z.object({\n  _id: z.string(),\n  username: z.string().min(3).max(30),\n  password: z.string().min(6),\n  isAdmin: z.boolean().default(false),\n  avatarUrl: z.string().optional(),\n  createdAt: z.date().or(z.string()),\n});\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(30),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  isAdmin: z.boolean().optional().default(false),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\n// Room Schema\nexport const roomModeSchema = z.enum([\"screenshare\", \"watchparty\"]);\n\nexport const participantSchema = z.object({\n  userId: z.string(),\n  username: z.string(),\n  joinedAt: z.date().or(z.string()),\n});\n\nexport const roomSchema = z.object({\n  _id: z.string(),\n  name: z.string(),\n  ownerId: z.string(),\n  ownerUsername: z.string(),\n  mode: roomModeSchema,\n  videoUrl: z.string().optional(),\n  participants: z.array(participantSchema),\n  isActive: z.boolean(),\n  createdAt: z.date().or(z.string()),\n  updatedAt: z.date().or(z.string()),\n});\n\nexport const insertRoomSchema = z.object({\n  name: z.string().min(1, \"Room name is required\").max(50),\n  videoUrl: z.string().url().optional(),\n});\n\nexport const updateRoomSchema = z.object({\n  name: z.string().min(1).max(50).optional(),\n  mode: roomModeSchema.optional(),\n  videoUrl: z.string().url().optional().or(z.literal(\"\")),\n  ownerId: z.string().optional(),\n});\n\nexport type Room = z.infer<typeof roomSchema>;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type UpdateRoom = z.infer<typeof updateRoomSchema>;\nexport type RoomMode = z.infer<typeof roomModeSchema>;\nexport type Participant = z.infer<typeof participantSchema>;\n\n// Message Schema\nexport const messageSchema = z.object({\n  _id: z.string(),\n  roomId: z.string(),\n  userId: z.string(),\n  username: z.string(),\n  content: z.string(),\n  type: z.enum([\"text\", \"gif\", \"system\"]),\n  gifUrl: z.string().optional(),\n  createdAt: z.date().or(z.string()),\n});\n\nexport const insertMessageSchema = z.object({\n  roomId: z.string(),\n  content: z.string().min(1).max(1000),\n  type: z.enum([\"text\", \"gif\", \"system\"]).optional().default(\"text\"),\n  gifUrl: z.string().url().optional(),\n});\n\nexport type Message = z.infer<typeof messageSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\n// WebSocket Event Types\nexport const wsEventSchema = z.object({\n  type: z.enum([\n    \"message\",\n    \"user_joined\",\n    \"user_left\",\n    \"mode_changed\",\n    \"video_sync\",\n    \"ownership_transferred\",\n    \"room_updated\",\n  ]),\n  data: z.any(),\n  roomId: z.string().optional(),\n  userId: z.string().optional(),\n  timestamp: z.date().or(z.string()).optional(),\n});\n\nexport type WSEvent = z.infer<typeof wsEventSchema>;\n\n// Video Sync Event\nexport const videoSyncSchema = z.object({\n  action: z.enum([\"play\", \"pause\", \"seek\"]),\n  currentTime: z.number(),\n  videoUrl: z.string().optional(),\n});\n\nexport type VideoSync = z.infer<typeof videoSyncSchema>;\n\n// Auth Response\nexport const authResponseSchema = z.object({\n  token: z.string(),\n  user: z.object({\n    _id: z.string(),\n    username: z.string(),\n    isAdmin: z.boolean(),\n    avatarUrl: z.string().optional(),\n  }),\n});\n\n// Profile Update Schema\nexport const updateProfileSchema = z.object({\n  username: z.string().min(3).max(30).optional(),\n  avatarUrl: z.string()\n    .optional()\n    .refine((val) => {\n      if (!val || val === '') return true;\n      // Check if it's a base64 image\n      if (val.startsWith('data:image/')) {\n        const matches = val.match(/^data:image\\/(jpeg|jpg|png|gif|webp);base64,(.+)$/);\n        if (!matches) return false;\n        \n        // Check size (base64 adds ~33% overhead, so ~2.7MB base64 = ~2MB image)\n        const base64Length = matches[2].length;\n        const sizeInBytes = (base64Length * 3) / 4;\n        const sizeInMB = sizeInBytes / (1024 * 1024);\n        return sizeInMB <= 2.5; // Allow up to 2.5MB to account for ~2MB images\n      }\n      // Legacy: Also accept regular URLs\n      return /^https?:\\/\\/.+/.test(val);\n    }, \"Invalid image format or size. Must be a valid image (jpg, png, gif, webp) under 2MB\"),\n});\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1),\n  newPassword: z.string().min(6),\n});\n\nexport type UpdateProfile = z.infer<typeof updateProfileSchema>;\nexport type ChangePassword = z.infer<typeof changePasswordSchema>;\n\nexport type AuthResponse = z.infer<typeof authResponseSchema>;\n","size_bytes":4832},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"src/components/chat-input.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Smile, Send } from \"lucide-react\";\nimport EmojiPicker, { EmojiClickData } from \"emoji-picker-react\";\n\ninterface ChatInputProps {\n  onSendMessage?: (content: string) => void;\n  isMobile?: boolean;\n}\n\nexport function ChatInput({ onSendMessage, isMobile = false }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim()) {\n      onSendMessage?.(message.trim());\n      setMessage(\"\");\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  const handleEmojiClick = (emojiData: EmojiClickData) => {\n    setMessage((prev) => prev + emojiData.emoji);\n    setShowEmojiPicker(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={isMobile ? \"border-t p-2\" : \"border-t p-4\"}>\n      <div className=\"flex gap-2 items-end\">\n        <Textarea\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Type a message...\"\n          className={`resize-none ${isMobile ? \"min-h-[36px] max-h-20 text-sm\" : \"min-h-[44px] max-h-32\"}`}\n          rows={1}\n          data-testid=\"input-chat-message\"\n        />\n        <div className={`flex ${isMobile ? \"flex-row gap-1\" : \"flex-col gap-2\"}`}>\n          <Popover open={showEmojiPicker} onOpenChange={setShowEmojiPicker}>\n            <PopoverTrigger asChild>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size={isMobile ? \"sm\" : \"icon\"}\n                data-testid=\"button-emoji-picker\"\n              >\n                <Smile className={isMobile ? \"h-4 w-4\" : \"h-5 w-5\"} />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent \n              className=\"w-auto p-0 border-none z-[100]\" \n              align={isMobile ? \"center\" : \"end\"} \n              side=\"top\"\n              sideOffset={8}\n              avoidCollisions={true}\n            >\n              <EmojiPicker\n                onEmojiClick={handleEmojiClick}\n                width={isMobile ? 300 : 350}\n                height={isMobile ? 350 : 400}\n                previewConfig={{ showPreview: false }}\n              />\n            </PopoverContent>\n          </Popover>\n          <Button\n            type=\"submit\"\n            size={isMobile ? \"sm\" : \"icon\"}\n            disabled={!message.trim()}\n            data-testid=\"button-send-message\"\n          >\n            <Send className={isMobile ? \"h-4 w-4\" : \"h-5 w-5\"} />\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n}\n","size_bytes":2993},"src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"dark\" ? (\n        <Sun className=\"h-5 w-5\" />\n      ) : (\n        <Moon className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":547},"src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Rooms from \"@/pages/rooms\";\nimport Room from \"@/pages/room\";\nimport Profile from \"@/pages/profile\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && location === \"/\") {\n      if (isAuthenticated) {\n        setLocation(\"/rooms\");\n      }\n    }\n  }, [isAuthenticated, isLoading, location, setLocation]);\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/rooms\" component={Rooms} />\n      <Route path=\"/room/:id\" component={Room} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const sidebarStyle = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <ThemeProvider defaultTheme=\"dark\">\n            <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n              <div className=\"flex h-screen w-full\">\n                <AppSidebar />\n                <div className=\"flex flex-col flex-1 overflow-hidden\">\n                  <header className=\"flex items-center justify-between gap-2 p-3 border-b\">\n                    <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                    <ThemeToggle />\n                  </header>\n                  <main className=\"flex-1 overflow-hidden\">\n                    <Router />\n                  </main>\n                </div>\n              </div>\n            </SidebarProvider>\n            <Toaster />\n          </ThemeProvider>\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2705},"src/components/ownership-transfer.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Crown } from \"lucide-react\";\nimport type { Participant } from \"@/lib/schema\";\n\ninterface OwnershipTransferProps {\n  participants: Participant[];\n  currentOwnerId: string;\n  onTransfer?: (newOwnerId: string) => void;\n}\n\nexport function OwnershipTransfer({\n  participants,\n  currentOwnerId,\n  onTransfer,\n}: OwnershipTransferProps) {\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n  const [open, setOpen] = useState(false);\n\n  const eligibleParticipants = participants.filter(\n    (p) => p.userId !== currentOwnerId\n  );\n\n  const handleTransfer = () => {\n    if (selectedUserId) {\n      onTransfer?.(selectedUserId);\n      setOpen(false);\n      setSelectedUserId(\"\");\n    }\n  };\n\n  if (eligibleParticipants.length === 0) {\n    return null;\n  }\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          data-testid=\"button-transfer-ownership\"\n        >\n          <Crown className=\"mr-1 h-4 w-4\" />\n          Transfer Ownership\n        </Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent data-testid=\"dialog-transfer-ownership\">\n        <AlertDialogHeader>\n          <AlertDialogTitle>Transfer Room Ownership</AlertDialogTitle>\n          <AlertDialogDescription>\n            Select a participant to become the new room owner. This action cannot\n            be undone.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <div className=\"py-4\">\n          <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n            <SelectTrigger data-testid=\"select-new-owner\">\n              <SelectValue placeholder=\"Select new owner\" />\n            </SelectTrigger>\n            <SelectContent>\n              {eligibleParticipants.map((participant) => (\n                <SelectItem\n                  key={participant.userId}\n                  value={participant.userId}\n                  data-testid={`select-option-${participant.userId}`}\n                >\n                  {participant.username}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <AlertDialogFooter>\n          <AlertDialogCancel data-testid=\"button-cancel-transfer\">\n            Cancel\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleTransfer}\n            disabled={!selectedUserId}\n            data-testid=\"button-confirm-transfer\"\n          >\n            Transfer Ownership\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":3079},"src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Video, Users, MonitorPlay, MessageSquare, Shield, Zap } from \"lucide-react\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && isAuthenticated) {\n      setLocation(\"/rooms\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  if (isLoading) {\n    return null;\n  }\n\n  if (isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"container max-w-6xl mx-auto px-4 py-12 space-y-16\">\n        {/* Hero Section */}\n        <div className=\"text-center space-y-6\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-primary\">\n              <Video className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-4xl font-bold tracking-tight sm:text-5xl\">\n              WatchTogether\n            </h1>\n          </div>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Watch videos and share screens with friends in real-time. Connect, collaborate, and enjoy content together.\n          </p>\n          <div className=\"flex items-center justify-center gap-4 pt-4\">\n            <Button\n              size=\"lg\"\n              onClick={() => setLocation(\"/login\")}\n              data-testid=\"button-login\"\n            >\n              Get Started\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              onClick={() => setLocation(\"/login\")}\n              data-testid=\"button-signup\"\n            >\n              Sign Up\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-2\">\n            <h2 className=\"text-3xl font-semibold tracking-tight\">\n              Everything you need to watch together\n            </h2>\n            <p className=\"text-muted-foreground\">\n              Powerful features to enhance your shared viewing experience\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n            <Card data-testid=\"feature-watchparty\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                    <Video className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">Watch Party</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Watch YouTube videos together in perfect sync. Everyone sees the same thing at the same time.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-screenshare\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                    <MonitorPlay className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">Screen Share</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Share your screen with others for presentations, gaming, or collaborative work.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-chat\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                    <MessageSquare className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">Real-Time Chat</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Chat with participants in real-time. Share reactions and thoughts as you watch.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-rooms\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                    <Users className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">Private Rooms</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Create private rooms for your friends. Control who joins and manage permissions.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-secure\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                    <Shield className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">Secure & Private</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Your sessions are secure and private. We respect your privacy and don't track your activity.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-instant\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                    <Zap className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">Instant Setup</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  No downloads or installations. Start watching together in seconds with just a link.\n                </CardDescription>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center space-y-4 py-12\">\n          <h2 className=\"text-3xl font-semibold tracking-tight\">\n            Ready to get started?\n          </h2>\n          <p className=\"text-muted-foreground max-w-xl mx-auto\">\n            Join WatchTogether today and start enjoying content with friends in real-time.\n          </p>\n          <div className=\"pt-4\">\n            <Button\n              size=\"lg\"\n              onClick={() => setLocation(\"/login\")}\n              data-testid=\"button-cta-login\"\n            >\n              Get Started Now\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7472},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"src/components/system-message.tsx":{"content":"import type { Message } from \"@/lib/schema\";\n\ninterface SystemMessageProps {\n  message: Message;\n}\n\nexport function SystemMessage({ message }: SystemMessageProps) {\n  const timestamp = new Date(message.createdAt).toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  return (\n    <div\n      className=\"flex items-center justify-center px-4 py-2\"\n      data-testid={`system-message-${message._id}`}\n    >\n      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n        <span data-testid={`text-system-content-${message._id}`}>\n          {message.content}\n        </span>\n        <span className=\"text-[10px]\">•</span>\n        <span data-testid={`text-system-time-${message._id}`}>{timestamp}</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":777},"src/pages/room.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useRoom, useJoinRoom, useLeaveRoom, useUpdateRoom, useTransferOwnership } from \"@/hooks/useRooms\";\nimport { useMessages, useSendMessage } from \"@/hooks/useMessages\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { RoomVideo } from \"@/components/room-video\";\nimport { RoomControls } from \"@/components/room-controls\";\nimport { OwnershipTransfer } from \"@/components/ownership-transfer\";\nimport { ChatPanel } from \"@/components/chat-panel\";\nimport { BottomNav, type BottomNavTab } from \"@/components/bottom-nav\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Crown, Users } from \"lucide-react\";\nimport type { Room as RoomType, Message, VideoSync } from \"@/lib/schema\";\n\nexport default function Room() {\n  const params = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n\n  const { data: room, isLoading: roomLoading } = useRoom(params.id);\n  const { data: messages = [], isLoading: messagesLoading } = useMessages(params.id);\n  const roomData = room as RoomType | undefined;\n  const messagesList = (messages || []) as Message[];\n  const joinRoomMutation = useJoinRoom(params.id!);\n  const leaveRoomMutation = useLeaveRoom(params.id!);\n  const updateRoomMutation = useUpdateRoom(params.id!);\n  const transferOwnershipMutation = useTransferOwnership(params.id!);\n  const sendMessageMutation = useSendMessage(params.id!);\n  \n  const [videoSyncEvent, setVideoSyncEvent] = useState<VideoSync | null>(null);\n  const [activeTab, setActiveTab] = useState<BottomNavTab>(\"chat\");\n  \n  const { sendMessage } = useWebSocket(params.id, {\n    onVideoSync: (data: VideoSync) => {\n      setVideoSyncEvent(data);\n    },\n  });\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    if (roomData && user) {\n      const isParticipant = roomData.participants.some((p: any) => p.userId === user._id);\n      if (!isParticipant) {\n        joinRoomMutation.mutate();\n      }\n    }\n  }, [isAuthenticated, authLoading, roomData, user, setLocation]);\n\n  if (authLoading || !isAuthenticated) {\n    return null;\n  }\n\n  const isOwner = !!(roomData && user && roomData.ownerId.toString() === user._id);\n\n  const handleModeChange = async (newMode: RoomType[\"mode\"]) => {\n    try {\n      await updateRoomMutation.mutateAsync({ mode: newMode });\n      toast({\n        title: \"Mode updated\",\n        description: `Room mode changed to ${newMode === \"screenshare\" ? \"Screen Share\" : \"Watch Party\"}`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to update mode\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleLeaveRoom = async () => {\n    try {\n      await leaveRoomMutation.mutateAsync();\n      setLocation(\"/rooms\");\n    } catch (error: any) {\n      toast({\n        title: \"Failed to leave room\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleOwnershipTransfer = async (newOwnerId: string) => {\n    try {\n      await transferOwnershipMutation.mutateAsync(newOwnerId);\n      toast({\n        title: \"Ownership transferred\",\n        description: \"Room ownership has been transferred successfully\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to transfer ownership\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSendMessage = async (content: string) => {\n    try {\n      await sendMessageMutation.mutateAsync({ content, type: \"text\" });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleVideoSync = (syncData: VideoSync) => {\n    sendMessage({\n      type: 'video_sync',\n      data: syncData,\n    });\n  };\n\n  if (roomLoading || messagesLoading) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"p-4 border-b\">\n          <Skeleton className=\"h-8 w-48\" />\n        </div>\n        <div className=\"flex-1 flex\">\n          <div className=\"flex-1 p-6\">\n            <Skeleton className=\"w-full aspect-video\" />\n          </div>\n          <div className=\"w-80 border-l\">\n            <Skeleton className=\"h-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!roomData) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold\">Room not found</h2>\n          <p className=\"text-muted-foreground mt-2\">The room you're looking for doesn't exist</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Desktop Layout: Side-by-side (video left, chat right)\n  if (!isMobile) {\n    return (\n      <div className=\"h-full flex flex-col\" data-testid=\"room-page\">\n        {/* Header with room info and controls */}\n        <div className=\"flex-shrink-0 border-b bg-background p-4\">\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n              <h2 className=\"font-semibold truncate text-lg\">{roomData.name}</h2>\n              <Badge variant=\"secondary\">\n                {roomData.mode === \"screenshare\" ? \"Screen Share\" : \"Watch Party\"}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center gap-2 flex-shrink-0\">\n              {/* Participants Sheet */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    Participants ({roomData.participants.length})\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-96\">\n                  <SheetHeader>\n                    <SheetTitle className=\"flex items-center justify-between\">\n                      <span>Participants ({roomData.participants.length})</span>\n                      {isOwner && (\n                        <OwnershipTransfer\n                          participants={roomData.participants}\n                          currentOwnerId={roomData.ownerId.toString()}\n                          onTransfer={handleOwnershipTransfer}\n                        />\n                      )}\n                    </SheetTitle>\n                  </SheetHeader>\n                  <ScrollArea className=\"h-full mt-4\">\n                    <div className=\"space-y-2\">\n                      {roomData.participants.map((participant: any) => (\n                        <div\n                          key={participant.userId}\n                          className=\"flex items-center gap-3 rounded-md border p-3\"\n                          data-testid={`participant-${participant.userId}`}\n                        >\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarFallback className=\"text-xs\">\n                              {participant.username.slice(0, 2).toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-sm font-medium flex-1\">\n                            {participant.username}\n                          </span>\n                          {participant.userId === roomData.ownerId.toString() && (\n                            <Badge\n                              variant=\"secondary\"\n                              className=\"h-6 px-2\"\n                              data-testid={`owner-badge-${participant.userId}`}\n                            >\n                              <Crown className=\"h-3 w-3 text-primary mr-1\" />\n                              Owner\n                            </Badge>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </SheetContent>\n              </Sheet>\n\n              {/* Room Controls - For Owner */}\n              {isOwner && (\n                <RoomControls\n                  roomId={roomData._id}\n                  roomName={roomData.name}\n                  mode={roomData.mode}\n                  isOwner={isOwner}\n                  onModeChange={handleModeChange}\n                  onLeave={handleLeaveRoom}\n                />\n              )}\n              \n              {/* Leave Button - For Non-Owners */}\n              {!isOwner && (\n                <Button \n                  variant=\"destructive\" \n                  size=\"sm\" \n                  onClick={handleLeaveRoom}\n                >\n                  Leave Room\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Main content: Video (left) and Chat (right) */}\n        <div className=\"flex-1 flex min-h-0\">\n          {/* Video Section */}\n          <div className=\"flex-1 bg-black flex items-center justify-center\">\n            <div className=\"w-full h-full\">\n              <RoomVideo \n                mode={roomData.mode} \n                videoUrl={roomData.videoUrl}\n                isOwner={isOwner}\n                onVideoSync={handleVideoSync}\n                videoSyncEvent={videoSyncEvent}\n              />\n            </div>\n          </div>\n\n          {/* Chat Sidebar */}\n          <div className=\"w-96 flex-shrink-0\">\n            <ChatPanel messages={messagesList} onSendMessage={handleSendMessage} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Mobile Layout: Stacked (video top, content middle, bottom nav)\n  return (\n    <div className=\"h-full flex flex-col pb-16\" data-testid=\"room-page\">\n      {/* Header with room info and controls */}\n      <div className=\"flex-shrink-0 border-b bg-background p-3\">\n        <div className=\"flex items-center justify-between gap-2\">\n          <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n            <h2 className=\"font-semibold truncate text-sm\">{roomData.name}</h2>\n            <Badge variant=\"secondary\" className=\"flex-shrink-0 text-xs\">\n              {roomData.mode === \"screenshare\" ? \"Screen\" : \"Watch\"}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-2 flex-shrink-0\">\n            {/* Room Settings - For Owner */}\n            {isOwner && (\n              <RoomControls\n                roomId={roomData._id}\n                roomName={roomData.name}\n                mode={roomData.mode}\n                isOwner={isOwner}\n                onModeChange={handleModeChange}\n                onLeave={handleLeaveRoom}\n              />\n            )}\n            \n            {/* Leave Button - For Non-Owners */}\n            {!isOwner && (\n              <Button \n                variant=\"destructive\" \n                size=\"sm\" \n                onClick={handleLeaveRoom}\n                data-testid=\"button-leave-room\"\n              >\n                Leave\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Video Section - Top */}\n      <div className=\"flex-shrink-0 bg-black\">\n        <div className=\"aspect-video\">\n          <RoomVideo \n            mode={roomData.mode} \n            videoUrl={roomData.videoUrl}\n            isOwner={isOwner}\n            onVideoSync={handleVideoSync}\n            videoSyncEvent={videoSyncEvent}\n          />\n        </div>\n      </div>\n\n      {/* Content Section - Middle (flexible height based on active tab) */}\n      <div className=\"flex-1 min-h-0 border-t\">\n        {activeTab === \"chat\" && (\n          <ChatPanel messages={messagesList} onSendMessage={handleSendMessage} />\n        )}\n        \n        {activeTab === \"participants\" && (\n          <div className=\"h-full flex flex-col\">\n            <div className=\"flex-shrink-0 p-4 border-b\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-semibold\">Participants ({roomData.participants.length})</h3>\n                {isOwner && (\n                  <OwnershipTransfer\n                    participants={roomData.participants}\n                    currentOwnerId={roomData.ownerId.toString()}\n                    onTransfer={handleOwnershipTransfer}\n                  />\n                )}\n              </div>\n            </div>\n            <ScrollArea className=\"flex-1\">\n              <div className=\"p-4 space-y-3\">\n                {roomData.participants.map((participant: any) => (\n                  <div\n                    key={participant.userId}\n                    className=\"flex items-center gap-3 rounded-md border p-3\"\n                    data-testid={`participant-${participant.userId}`}\n                  >\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback className=\"text-sm\">\n                        {participant.username.slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm font-medium flex-1\">\n                      {participant.username}\n                    </span>\n                    {participant.userId === roomData.ownerId.toString() && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"h-6 px-2\"\n                        data-testid={`owner-badge-${participant.userId}`}\n                      >\n                        <Crown className=\"h-3 w-3 text-primary mr-1\" />\n                        Owner\n                      </Badge>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n      </div>\n\n      {/* Bottom Navigation */}\n      <BottomNav \n        activeTab={activeTab} \n        onTabChange={setActiveTab}\n        participantCount={roomData.participants.length}\n        roomName={roomData.name}\n        roomMode={roomData.mode}\n        isOwner={isOwner}\n        onModeChange={handleModeChange}\n        onLeaveRoom={handleLeaveRoom}\n      />\n    </div>\n  );\n}\n","size_bytes":14846},"src/components/app-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Video,\n  Users,\n  Shield,\n  Crown,\n  Circle,\n  LogOut,\n} from \"lucide-react\";\nimport type { Room } from \"@/lib/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useRooms } from \"@/hooks/useRooms\";\n\nexport function AppSidebar() {\n  const [location, setLocation] = useLocation();\n  const { user, isAuthenticated, logout } = useAuth();\n  const { data: rooms, isLoading: roomsLoading } = useRooms();\n\n  const isActive = (path: string) => location === path;\n\n  // Filter active rooms with participants\n  const activeRooms = ((rooms || []) as Room[]).filter(\n    (room) => room.isActive && room.participants.length > 0\n  );\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation(\"/login\");\n  };\n\n  // Don't render sidebar if not authenticated\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <Sidebar data-testid=\"app-sidebar\">\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary\">\n            <Video className=\"h-4 w-4 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-sm font-semibold\">WatchTogether</h2>\n            <p className=\"text-xs text-muted-foreground\">Watch with friends</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent className=\"px-2\">\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton\n                  asChild\n                  isActive={isActive(\"/rooms\")}\n                  data-testid=\"nav-rooms\"\n                >\n                  <Link href=\"/rooms\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>All Rooms</span>\n                  </Link>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n              {user?.isAdmin && (\n                <SidebarMenuItem>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={isActive(\"/admin\")}\n                    data-testid=\"nav-admin\"\n                  >\n                    <Link href=\"/admin\">\n                      <Shield className=\"h-4 w-4\" />\n                      <span>Admin Panel</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              )}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <Separator className=\"my-2\" />\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Active Rooms</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {roomsLoading ? (\n                <div className=\"px-3 py-2 space-y-2\">\n                  <Skeleton className=\"h-10 w-full\" />\n                  <Skeleton className=\"h-10 w-full\" />\n                </div>\n              ) : activeRooms.length === 0 ? (\n                <div className=\"px-3 py-6 text-center text-sm text-muted-foreground\">\n                  No active rooms\n                </div>\n              ) : (\n                activeRooms.map((room: Room) => (\n                  <SidebarMenuItem key={room._id}>\n                    <SidebarMenuButton\n                      asChild\n                      isActive={isActive(`/room/${room._id}`)}\n                      data-testid={`nav-room-${room._id}`}\n                    >\n                      <Link href={`/room/${room._id}`}>\n                        <Circle\n                          className={`h-2 w-2 ${\n                            room.isActive\n                              ? \"fill-status-online text-status-online\"\n                              : \"fill-muted text-muted\"\n                          }`}\n                        />\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"truncate text-sm\">{room.name}</div>\n                          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                            {user && room.ownerId === user._id && (\n                              <Crown className=\"h-3 w-3\" />\n                            )}\n                            <span className=\"truncate\">\n                              {room.participants.length}{\" \"}\n                              {room.participants.length === 1\n                                ? \"person\"\n                                : \"people\"}\n                            </span>\n                          </div>\n                        </div>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))\n              )}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-2\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton asChild className=\"w-full\" data-testid=\"nav-user-profile\">\n              <Link href=\"/profile\">\n                <Avatar className=\"h-6 w-6\">\n                  {user?.avatarUrl && <AvatarImage src={user.avatarUrl} alt={user.username} />}\n                  <AvatarFallback className=\"text-xs\">\n                    {user?.username.slice(0, 2).toUpperCase() || \"??\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1 text-left min-w-0\">\n                  <div className=\"text-sm font-medium truncate\">\n                    {user?.username || \"Unknown\"}\n                  </div>\n                  {user?.isAdmin && (\n                    <Badge variant=\"secondary\" className=\"h-4 px-1 text-xs\">\n                      Admin\n                    </Badge>\n                  )}\n                </div>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n          <SidebarMenuItem>\n            <SidebarMenuButton onClick={handleLogout} data-testid=\"nav-logout\">\n              <LogOut className=\"h-4 w-4\" />\n              <span>Sign Out</span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":6731},"src/components/chat-message.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport type { Message } from \"@/lib/schema\";\n\ninterface ChatMessageProps {\n  message: Message;\n}\n\nexport function ChatMessage({ message }: ChatMessageProps) {\n  const timestamp = new Date(message.createdAt).toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  return (\n    <div\n      className=\"group flex gap-3 px-4 py-2 hover-elevate\"\n      data-testid={`message-${message._id}`}\n    >\n      <Avatar className=\"h-8 w-8 shrink-0\">\n        <AvatarFallback className=\"text-xs\">\n          {message.username.slice(0, 2).toUpperCase()}\n        </AvatarFallback>\n      </Avatar>\n      <div className=\"flex-1 min-w-0 space-y-1\">\n        <div className=\"flex items-baseline gap-2\">\n          <span\n            className=\"font-medium text-sm\"\n            data-testid={`text-message-username-${message._id}`}\n          >\n            {message.username}\n          </span>\n          <span\n            className=\"text-xs text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity\"\n            data-testid={`text-message-time-${message._id}`}\n          >\n            {timestamp}\n          </span>\n        </div>\n        {message.type === \"gif\" && message.gifUrl ? (\n          <img\n            src={message.gifUrl}\n            alt=\"GIF\"\n            className=\"max-w-xs rounded-md\"\n            data-testid={`img-message-gif-${message._id}`}\n          />\n        ) : (\n          <p\n            className=\"text-sm break-words\"\n            data-testid={`text-message-content-${message._id}`}\n          >\n            {message.content}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1678},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport { insertUserSchema, type InsertUser, type User } from \"@/lib/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useUsers, useCreateUser, useUpdateUser, useDeleteUser } from \"@/hooks/useUsers\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, UserPlus, Edit, Trash2, Shield, Users } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const { data: users = [], isLoading: usersLoading } = useUsers();\n  const usersList = (users || []) as User[];\n  const createUserMutation = useCreateUser();\n  const updateUserMutation = useUpdateUser();\n  const deleteUserMutation = useDeleteUser();\n\n  const createForm = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      isAdmin: false,\n    },\n  });\n\n  const editForm = useForm<Partial<InsertUser>>({\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      isAdmin: false,\n    },\n  });\n\n  useEffect(() => {\n    if (!authLoading) {\n      if (!isAuthenticated) {\n        setLocation(\"/login\");\n        return;\n      }\n      if (!user?.isAdmin) {\n        setLocation(\"/rooms\");\n        return;\n      }\n    }\n  }, [isAuthenticated, user, authLoading, setLocation]);\n\n  if (authLoading || !isAuthenticated || !user?.isAdmin) {\n    return null;\n  }\n\n  const filteredUsers = usersList.filter((u: User) =>\n    u.username.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const onCreateUser = async (data: InsertUser) => {\n    try {\n      await createUserMutation.mutateAsync(data);\n      setCreateDialogOpen(false);\n      createForm.reset();\n      toast({\n        title: \"User created\",\n        description: `User \"${data.username}\" has been created successfully.`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to create user\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onEditUser = async (data: Partial<InsertUser>) => {\n    if (!selectedUser) return;\n    try {\n      const updateData: any = {};\n      if (data.username) updateData.username = data.username;\n      if (data.password) updateData.password = data.password;\n      if (data.isAdmin !== undefined) updateData.isAdmin = data.isAdmin;\n\n      await updateUserMutation.mutateAsync({\n        id: selectedUser._id,\n        data: updateData,\n      });\n      setEditDialogOpen(false);\n      setSelectedUser(null);\n      editForm.reset();\n      toast({\n        title: \"User updated\",\n        description: \"User has been updated successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to update user\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onDeleteUser = async () => {\n    if (!selectedUser) return;\n    try {\n      await deleteUserMutation.mutateAsync(selectedUser._id);\n      setDeleteDialogOpen(false);\n      setSelectedUser(null);\n      toast({\n        title: \"User deleted\",\n        description: \"User has been deleted successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to delete user\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const openEditDialog = (u: User) => {\n    setSelectedUser(u);\n    editForm.reset({\n      username: u.username,\n      password: \"\",\n      isAdmin: u.isAdmin,\n    });\n    setEditDialogOpen(true);\n  };\n\n  const openDeleteDialog = (u: User) => {\n    setSelectedUser(u);\n    setDeleteDialogOpen(true);\n  };\n\n  if (usersLoading) {\n    return (\n      <div className=\"h-full overflow-auto\">\n        <div className=\"container max-w-7xl mx-auto p-6 space-y-6\">\n          <div className=\"space-y-1\">\n            <Skeleton className=\"h-9 w-64\" />\n            <Skeleton className=\"h-5 w-48\" />\n          </div>\n          <Skeleton className=\"h-10 w-full\" />\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-10 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"container max-w-7xl mx-auto p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">\n              User Management\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Manage users and permissions\n            </p>\n          </div>\n          <Button\n            onClick={() => setCreateDialogOpen(true)}\n            data-testid=\"button-create-user\"\n          >\n            <UserPlus className=\"mr-2 h-4 w-4\" />\n            Create User\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search users...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-9\"\n            data-testid=\"input-search-users\"\n          />\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-2 space-y-0 pb-2\">\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-users\">\n                {usersList.length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-2 space-y-0 pb-2\">\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n              <CardTitle className=\"text-sm font-medium\">Admins</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-admin-count\">\n                {usersList.filter((u: User) => u.isAdmin).length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* User Grid */}\n        {filteredUsers.length === 0 ? (\n          <Card className=\"p-12\">\n            <div className=\"flex flex-col items-center justify-center text-center space-y-3\">\n              <Users className=\"h-12 w-12 text-muted-foreground\" />\n              <div className=\"space-y-1\">\n                <h3 className=\"font-semibold\">No users found</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {searchQuery\n                    ? \"Try adjusting your search\"\n                    : \"Create your first user to get started\"}\n                </p>\n              </div>\n            </div>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {filteredUsers.map((u: User) => (\n              <Card\n                key={u._id}\n                className=\"overflow-hidden\"\n                data-testid={`card-user-${u._id}`}\n              >\n                <CardHeader className=\"gap-2 space-y-0\">\n                  <div className=\"flex items-start gap-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback>\n                        {u.username.slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle\n                        className=\"text-base truncate\"\n                        data-testid={`text-username-${u._id}`}\n                      >\n                        {u.username}\n                      </CardTitle>\n                      {u.isAdmin && (\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"mt-1\"\n                          data-testid={`badge-admin-${u._id}`}\n                        >\n                          <Shield className=\"mr-1 h-3 w-3\" />\n                          Admin\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => openEditDialog(u)}\n                    data-testid={`button-edit-${u._id}`}\n                  >\n                    <Edit className=\"mr-1 h-3 w-3\" />\n                    Edit\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={() => openDeleteDialog(u)}\n                    data-testid={`button-delete-${u._id}`}\n                  >\n                    <Trash2 className=\"mr-1 h-3 w-3\" />\n                    Delete\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create User Dialog */}\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogContent data-testid=\"dialog-create-user\">\n            <DialogHeader>\n              <DialogTitle>Create User</DialogTitle>\n              <DialogDescription>\n                Add a new user to the system\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form\n                onSubmit={createForm.handleSubmit(onCreateUser)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={createForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter username\"\n                          data-testid=\"input-create-username\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Enter password\"\n                          data-testid=\"input-create-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"isAdmin\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between gap-2 rounded-md border p-3 space-y-0\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Admin Privileges</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Grant administrative access\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-create-admin\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCreateDialogOpen(false)}\n                    data-testid=\"button-cancel-create\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createUserMutation.isPending}\n                    data-testid=\"button-submit-create\"\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit User Dialog */}\n        <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n          <DialogContent data-testid=\"dialog-edit-user\">\n            <DialogHeader>\n              <DialogTitle>Edit User</DialogTitle>\n              <DialogDescription>\n                Update user information and permissions\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form\n                onSubmit={editForm.handleSubmit(onEditUser)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={editForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter username\"\n                          data-testid=\"input-edit-username\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Leave empty to keep current\"\n                          data-testid=\"input-edit-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"isAdmin\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between gap-2 rounded-md border p-3 space-y-0\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel>Admin Privileges</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Grant administrative access\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-edit-admin\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditDialogOpen(false)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateUserMutation.isPending}\n                    data-testid=\"button-submit-edit\"\n                  >\n                    {updateUserMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n          <AlertDialogContent data-testid=\"dialog-delete-user\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete User</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to delete{\" \"}\n                <span className=\"font-semibold\">{selectedUser?.username}</span>?\n                This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete\">\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction\n                onClick={onDeleteUser}\n                disabled={deleteUserMutation.isPending}\n                className=\"bg-destructive text-destructive-foreground border-destructive-border\"\n                data-testid=\"button-confirm-delete\"\n              >\n                {deleteUserMutation.isPending ? \"Deleting...\" : \"Delete\"}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19595},"src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { api } from '@/lib/api';\n\ninterface User {\n  _id: string;\n  username: string;\n  isAdmin: boolean;\n  avatarUrl?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  updateUser: (user: User) => void;\n  getToken: () => string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const queryClient = useQueryClient();\n  const [token, setToken] = useState<string | null>(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('auth_token');\n    }\n    return null;\n  });\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: ['auth', 'me'],\n    queryFn: async () => {\n      try {\n        const response = await api.auth.getMe();\n        return response as User;\n      } catch (error) {\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: Infinity,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: ({ username, password }: { username: string; password: string }) =>\n      api.auth.login(username, password),\n    onSuccess: (data: any) => {\n      const newToken = data.token;\n      setToken(newToken);\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('auth_token', newToken);\n      }\n      queryClient.setQueryData(['auth', 'me'], data.user);\n      queryClient.invalidateQueries({ queryKey: ['auth', 'me'] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => api.auth.logout(),\n    onSuccess: () => {\n      setToken(null);\n      if (typeof window !== 'undefined') {\n        localStorage.removeItem('auth_token');\n      }\n      queryClient.setQueryData(['auth', 'me'], null);\n      queryClient.clear();\n    },\n  });\n\n  const login = async (username: string, password: string) => {\n    await loginMutation.mutateAsync({ username, password });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const getToken = () => token;\n\n  const updateUser = (updatedUser: User) => {\n    queryClient.setQueryData(['auth', 'me'], updatedUser);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user || null,\n        isLoading,\n        isAuthenticated: !!user,\n        login,\n        logout,\n        updateUser,\n        getToken,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2868},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"src/pages/login.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport { loginSchema, type LoginCredentials } from \"@/lib/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Video } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation(\"/rooms\");\n    }\n  }, [isAuthenticated, setLocation]);\n\n  const onSubmit = async (data: LoginCredentials) => {\n    try {\n      await login(data.username, data.password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully signed in.\",\n      });\n      setLocation(\"/rooms\");\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-md bg-primary\">\n            <Video className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <div className=\"space-y-2\">\n            <CardTitle className=\"text-2xl font-semibold\">\n              Welcome to WatchTogether\n            </CardTitle>\n            <CardDescription>\n              Sign in to start watching with friends\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter your username\"\n                        data-testid=\"input-username\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        data-testid=\"input-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                data-testid=\"button-login\"\n                disabled={form.formState.isSubmitting}\n              >\n                {form.formState.isSubmitting ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3999},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface WebSocketMessage {\n  type: 'message' | 'user_joined' | 'user_left' | 'mode_changed' | 'ownership_transferred' | 'room_updated' | 'video_sync';\n  data: any;\n  roomId?: string;\n  userId?: string;\n  username?: string;\n  timestamp?: string;\n}\n\ninterface UseWebSocketOptions {\n  onVideoSync?: (data: any) => void;\n}\n\nexport function useWebSocket(roomId: string | undefined, options?: UseWebSocketOptions) {\n  const wsRef = useRef<WebSocket | null>(null);\n  const queryClient = useQueryClient();\n  const { getToken } = useAuth();\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  const onVideoSyncRef = useRef(options?.onVideoSync);\n\n  // Update ref when callback changes\n  useEffect(() => {\n    onVideoSyncRef.current = options?.onVideoSync;\n  }, [options?.onVideoSync]);\n\n  const connect = useCallback(() => {\n    if (!roomId) return;\n\n    const token = getToken();\n    if (!token) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    const wsUrl = `${protocol}//${host}/ws?token=${token}`;\n\n    try {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        ws.send(JSON.stringify({\n          type: 'join_room',\n          data: { roomId }\n        }));\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n\n          switch (message.type) {\n            case 'message':\n              queryClient.invalidateQueries({ queryKey: ['rooms', roomId, 'messages'] });\n              break;\n\n            case 'video_sync':\n              if (onVideoSyncRef.current) {\n                onVideoSyncRef.current(message.data);\n              }\n              break;\n\n            case 'user_joined':\n            case 'user_left':\n            case 'mode_changed':\n            case 'ownership_transferred':\n            case 'room_updated':\n              queryClient.invalidateQueries({ queryKey: ['rooms', roomId] });\n              queryClient.invalidateQueries({ queryKey: ['rooms'] });\n              break;\n          }\n        } catch (error) {\n          console.error('WebSocket message error:', error);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, 3000);\n      };\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n    }\n  }, [roomId, getToken, queryClient]);\n\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n\n    if (wsRef.current) {\n      if (roomId && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'leave_room',\n          data: { roomId }\n        }));\n      }\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n  }, [roomId]);\n\n  const sendMessage = useCallback((data: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  return { sendMessage };\n}\n","size_bytes":3594},"replit.md":{"content":"# WatchTogether\n\n## Overview\n\nWatchTogether is a real-time collaborative streaming platform that enables users to watch videos together and share screens with live chat functionality. The application supports two primary modes: **screen sharing** for presentations and demonstrations, and **watch parties** for synchronized video viewing (YouTube integration). Built with a modern tech stack, it features real-time WebSocket communication, user authentication, room management, and dynamic ownership controls.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server\n- **Wouter** for client-side routing (lightweight alternative to React Router)\n- **TanStack Query (React Query)** for server state management and caching\n- **Tailwind CSS** with shadcn/ui component library for styling\n\n**Design System:**\n- Hybrid approach inspired by Discord (chat UX), Linear (clean interface), and Twitch (streaming features)\n- Dark-first design with light mode support via theme provider\n- Custom color palette with HSL values for both themes\n- Typography using Inter (UI) and JetBrains Mono (monospace for codes)\n- Responsive design with mobile-first considerations\n\n**State Management:**\n- React Context API for authentication state (`AuthContext`)\n- Theme management via `ThemeProvider` context\n- Server state handled by React Query with custom hooks\n- Real-time updates managed through WebSocket connections\n\n**Key UI Components:**\n- Room video player with YouTube embed support\n- Real-time chat panel with message history\n- Room controls for mode switching and settings\n- Ownership transfer dialogs for room management\n- Sidebar navigation with room listings\n\n### Backend Architecture\n\n**Technology Stack:**\n- **Express.js** server with TypeScript\n- **MongoDB** with Mongoose ODM for data persistence\n- **WebSocket** (ws library) for real-time communication\n- **JWT** for authentication with HTTP-only cookies\n- **bcrypt** for password hashing\n\n**API Design:**\n- RESTful endpoints for CRUD operations\n- Cookie-based authentication for stateful sessions\n- Middleware chain: logging → cookie parsing → authentication → validation\n- Express-validator for request validation with Zod schemas\n\n**Database Models (MongoDB/Mongoose):**\n1. **User Model**: Authentication and profile data with admin flags\n2. **Room Model**: Room metadata, ownership, mode (screenshare/watchparty), participants array, video URLs\n3. **Message Model**: Chat messages linked to rooms and users with type indicators (text/gif/system)\n\n**Real-time Communication:**\n- WebSocket server on `/ws` path with token-based authentication\n- Room-based message broadcasting (messages only sent to room participants)\n- Heartbeat mechanism (30s intervals) to detect disconnected clients\n- Event types: message, user_joined, user_left, mode_changed, ownership_transferred, room_updated\n\n**Authentication Flow:**\n1. Login via POST `/api/auth/login` returns JWT token in HTTP-only cookie\n2. Token validated on protected routes via `authenticateToken` middleware\n3. Admin routes protected with additional `requireAdmin` middleware\n4. WebSocket connections authenticated via token query parameter\n\n### External Dependencies\n\n**Database:**\n- MongoDB (local or cloud-hosted via `MONGODB_URI` environment variable)\n- Mongoose ODM for schema definition and queries\n- Connection managed in `backend/db.ts` with error handling and reconnection logic\n\n**Third-party Services:**\n- **YouTube Embed API**: For watch party video playback with iframe embedding\n- **Google Fonts**: Inter and JetBrains Mono fonts loaded via CDN\n\n**UI Component Library:**\n- **Radix UI** primitives for accessible, unstyled components (dialogs, dropdowns, etc.)\n- **shadcn/ui** configuration for styled component variants\n- Tailwind CSS for utility-first styling with custom design tokens\n\n**Development Tools:**\n- **Vite plugins**: Runtime error overlay, Replit cartographer (dev mode), dev banner\n- **Drizzle Kit**: Database migration tooling (configured but using Mongoose for actual ORM)\n- **esbuild**: Production server bundling\n\n**Authentication & Security:**\n- JWT tokens (jsonwebtoken) with 7-day expiration\n- bcrypt for password hashing (10 salt rounds)\n- Cookie-parser for session management\n- CORS handled through Vite proxy in development\n\n**Real-time Communication:**\n- **ws (WebSocket)** library for bidirectional client-server communication\n- Custom room-based message routing and connection management\n- Automatic reconnection logic on client side\n\n**Note on Database Configuration:**\nThe codebase shows Drizzle configuration files (`drizzle.config.ts`) pointing to PostgreSQL, but the actual implementation uses MongoDB with Mongoose. This suggests either:\n- A migration path from PostgreSQL to MongoDB\n- Unused configuration files from template setup\n- Future intention to support multiple database backends","size_bytes":5061},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"src/components/chat-panel.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { ChatMessage } from \"./chat-message\";\nimport { SystemMessage } from \"./system-message\";\nimport { ChatInput } from \"./chat-input\";\nimport type { Message } from \"@/lib/schema\";\n\ninterface ChatPanelProps {\n  messages: Message[];\n  onSendMessage?: (content: string) => void;\n}\n\nexport function ChatPanel({ messages, onSendMessage }: ChatPanelProps) {\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const isMobile = useIsMobile();\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"flex flex-col h-full border-l\" data-testid=\"chat-panel\">\n      {/* Only show header on desktop */}\n      {!isMobile && (\n        <div className=\"p-4 border-b\">\n          <h3 className=\"font-semibold\">Chat</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {messages.filter((m) => m.type !== \"system\").length} messages\n          </p>\n        </div>\n      )}\n      <ScrollArea className=\"flex-1\" ref={scrollRef}>\n        <div className=\"py-2 space-y-1\">\n          {messages.length === 0 ? (\n            <div className=\"flex items-center justify-center h-32 text-sm text-muted-foreground\">\n              No messages yet\n            </div>\n          ) : (\n            messages.map((message) =>\n              message.type === \"system\" ? (\n                <SystemMessage key={message._id} message={message} />\n              ) : (\n                <ChatMessage key={message._id} message={message} />\n              )\n            )\n          )}\n        </div>\n      </ScrollArea>\n      <ChatInput onSendMessage={onSendMessage} isMobile={isMobile} />\n    </div>\n  );\n}\n","size_bytes":1844},"src/pages/profile.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { api } from \"@/lib/api\";\nimport { updateProfileSchema, changePasswordSchema, type UpdateProfile, type ChangePassword } from \"@/lib/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User, Lock, ArrowLeft, Upload, X } from \"lucide-react\";\n\nexport default function Profile() {\n  const [, setLocation] = useLocation();\n  const { user, updateUser } = useAuth();\n  const { toast } = useToast();\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [isChangingPassword, setIsChangingPassword] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const profileForm = useForm<UpdateProfile>({\n    resolver: zodResolver(updateProfileSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      avatarUrl: user?.avatarUrl || \"\",\n    },\n  });\n\n  const passwordForm = useForm<ChangePassword>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n    },\n  });\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n    if (!validTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a valid image (jpg, png, gif, or webp)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (2MB)\n    const maxSize = 2 * 1024 * 1024; // 2MB in bytes\n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Please upload an image smaller than 2MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Convert to base64\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const base64String = e.target?.result as string;\n      profileForm.setValue(\"avatarUrl\", base64String);\n    };\n    reader.onerror = () => {\n      toast({\n        title: \"Failed to read file\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleRemoveAvatar = () => {\n    profileForm.setValue(\"avatarUrl\", \"\");\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  const onUpdateProfile = async (data: UpdateProfile) => {\n    setIsUpdating(true);\n    try {\n      const updatedUser = await api.profile.update(data);\n      updateUser(updatedUser as any);\n      toast({\n        title: \"Profile updated!\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to update profile\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  const onChangePassword = async (data: ChangePassword) => {\n    setIsChangingPassword(true);\n    try {\n      await api.profile.changePassword(data);\n      passwordForm.reset();\n      toast({\n        title: \"Password changed!\",\n        description: \"Your password has been changed successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to change password\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsChangingPassword(false);\n    }\n  };\n\n  const avatarUrl = profileForm.watch(\"avatarUrl\");\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"container max-w-4xl mx-auto p-4 sm:p-6 space-y-6\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/rooms\")}\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-semibold tracking-tight\">\n              Profile Settings\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Manage your account settings and preferences\n            </p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Profile Information\n            </CardTitle>\n            <CardDescription>\n              Update your profile information and avatar\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...profileForm}>\n              <form\n                onSubmit={profileForm.handleSubmit(onUpdateProfile)}\n                className=\"space-y-6\"\n              >\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4\">\n                  <div className=\"relative\">\n                    <Avatar className=\"h-20 w-20\" data-testid=\"avatar-preview\">\n                      {avatarUrl && <AvatarImage src={avatarUrl} alt={user?.username} />}\n                      <AvatarFallback className=\"text-2xl\">\n                        {user?.username.slice(0, 2).toUpperCase() || \"??\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    {avatarUrl && (\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full\"\n                        onClick={handleRemoveAvatar}\n                        data-testid=\"button-remove-avatar\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"flex-1 w-full space-y-2\">\n                    <FormField\n                      control={profileForm.control}\n                      name=\"avatarUrl\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Profile Photo</FormLabel>\n                          <FormControl>\n                            <div className=\"space-y-2\">\n                              <Input\n                                type=\"file\"\n                                accept=\"image/jpeg,image/jpg,image/png,image/gif,image/webp\"\n                                onChange={handleFileChange}\n                                ref={fileInputRef}\n                                className=\"cursor-pointer\"\n                                data-testid=\"input-avatar-file\"\n                              />\n                            </div>\n                          </FormControl>\n                          <FormDescription>\n                            Upload a photo from your device (jpg, png, gif, webp - max 2MB)\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                <FormField\n                  control={profileForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter your username\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        This is your public display name\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button type=\"submit\" disabled={isUpdating}>\n                  {isUpdating ? \"Updating...\" : \"Update Profile\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Lock className=\"h-5 w-5\" />\n              Change Password\n            </CardTitle>\n            <CardDescription>\n              Update your password to keep your account secure\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...passwordForm}>\n              <form\n                onSubmit={passwordForm.handleSubmit(onChangePassword)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={passwordForm.control}\n                  name=\"currentPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Enter current password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={passwordForm.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Enter new password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Must be at least 6 characters long\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button type=\"submit\" disabled={isChangingPassword}>\n                  {isChangingPassword ? \"Changing...\" : \"Change Password\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10915},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 15% 98%;\n\n  --foreground: 220 15% 12%;\n\n  --border: 220 10% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 12%;\n\n  --card-border: 220 10% 92%;\n\n  --sidebar: 220 15% 96%;\n\n  --sidebar-foreground: 220 15% 12%;\n\n  --sidebar-border: 220 10% 90%;\n\n  --sidebar-primary: 250 70% 55%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 12% 92%;\n\n  --sidebar-accent-foreground: 220 15% 12%;\n\n  --sidebar-ring: 250 70% 55%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 15% 12%;\n\n  --popover-border: 220 10% 92%;\n\n  --primary: 250 70% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 12% 94%;\n\n  --secondary-foreground: 220 15% 12%;\n\n  --muted: 220 12% 95%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 220 15% 94%;\n\n  --accent-foreground: 220 15% 12%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 10% 82%;\n  --ring: 250 70% 55%;\n  --chart-1: 250 70% 45%;\n  --chart-2: 142 70% 40%;\n  --chart-3: 38 90% 50%;\n  --chart-4: 200 80% 45%;\n  --chart-5: 280 65% 50%;\n\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Menlo', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 12% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 12% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 15% 12% / 0.06), 0px 1px 2px -1px hsl(220 15% 12% / 0.04);\n  --shadow: 0px 4px 6px 0px hsl(220 15% 12% / 0.07), 0px 2px 4px -1px hsl(220 15% 12% / 0.05);\n  --shadow-md: 0px 6px 12px 0px hsl(220 15% 12% / 0.08), 0px 3px 6px -2px hsl(220 15% 12% / 0.06);\n  --shadow-lg: 0px 10px 20px 0px hsl(220 15% 12% / 0.10), 0px 5px 10px -3px hsl(220 15% 12% / 0.08);\n  --shadow-xl: 0px 20px 40px 0px hsl(220 15% 12% / 0.12), 0px 10px 20px -5px hsl(220 15% 12% / 0.10);\n  --shadow-2xl: 0px 30px 60px 0px hsl(220 15% 12% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 15% 20%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 15% 16%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 220 15% 14%;\n\n  --sidebar-primary: 250 70% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 15% 14%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 250 70% 60%;\n\n  --popover: 220 15% 14%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 220 15% 18%;\n\n  --primary: 250 70% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 15% 16%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 220 12% 15%;\n\n  --muted-foreground: 220 10% 65%;\n\n  --accent: 220 15% 15%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 15% 28%;\n  --ring: 250 70% 60%;\n  --chart-1: 250 70% 65%;\n  --chart-2: 142 70% 55%;\n  --chart-3: 38 90% 60%;\n  --chart-4: 200 80% 60%;\n  --chart-5: 280 65% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px 0px hsl(0 0% 0% / 0.28), 0px 3px 6px -2px hsl(0 0% 0% / 0.22);\n  --shadow-lg: 0px 10px 20px 0px hsl(0 0% 0% / 0.32), 0px 5px 10px -3px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 20px 40px 0px hsl(0 0% 0% / 0.38), 0px 10px 20px -5px hsl(0 0% 0% / 0.30);\n  --shadow-2xl: 0px 30px 60px 0px hsl(0 0% 0% / 0.45);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11373},"src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"backend/schema.ts":{"content":"import { z } from \"zod\";\n\n// User Schema\nexport const userSchema = z.object({\n  _id: z.string(),\n  username: z.string().min(3).max(30),\n  password: z.string().min(6),\n  isAdmin: z.boolean().default(false),\n  avatarUrl: z.string().optional(),\n  createdAt: z.date().or(z.string()),\n});\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(30),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  isAdmin: z.boolean().optional().default(false),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\n// Room Schema\nexport const roomModeSchema = z.enum([\"screenshare\", \"watchparty\"]);\n\nexport const participantSchema = z.object({\n  userId: z.string(),\n  username: z.string(),\n  joinedAt: z.date().or(z.string()),\n});\n\nexport const roomSchema = z.object({\n  _id: z.string(),\n  name: z.string(),\n  ownerId: z.string(),\n  ownerUsername: z.string(),\n  mode: roomModeSchema,\n  videoUrl: z.string().optional(),\n  participants: z.array(participantSchema),\n  isActive: z.boolean(),\n  createdAt: z.date().or(z.string()),\n  updatedAt: z.date().or(z.string()),\n});\n\nexport const insertRoomSchema = z.object({\n  name: z.string().min(1, \"Room name is required\").max(50),\n  videoUrl: z.string().url().optional(),\n});\n\nexport const updateRoomSchema = z.object({\n  name: z.string().min(1).max(50).optional(),\n  mode: roomModeSchema.optional(),\n  videoUrl: z.string().url().optional().or(z.literal(\"\")),\n  ownerId: z.string().optional(),\n});\n\nexport type Room = z.infer<typeof roomSchema>;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type UpdateRoom = z.infer<typeof updateRoomSchema>;\nexport type RoomMode = z.infer<typeof roomModeSchema>;\nexport type Participant = z.infer<typeof participantSchema>;\n\n// Message Schema\nexport const messageSchema = z.object({\n  _id: z.string(),\n  roomId: z.string(),\n  userId: z.string(),\n  username: z.string(),\n  content: z.string(),\n  type: z.enum([\"text\", \"gif\", \"system\"]),\n  gifUrl: z.string().optional(),\n  createdAt: z.date().or(z.string()),\n});\n\nexport const insertMessageSchema = z.object({\n  roomId: z.string(),\n  content: z.string().min(1).max(1000),\n  type: z.enum([\"text\", \"gif\", \"system\"]).optional().default(\"text\"),\n  gifUrl: z.string().url().optional(),\n});\n\nexport type Message = z.infer<typeof messageSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\n// WebSocket Event Types\nexport const wsEventSchema = z.object({\n  type: z.enum([\n    \"message\",\n    \"user_joined\",\n    \"user_left\",\n    \"mode_changed\",\n    \"video_sync\",\n    \"ownership_transferred\",\n    \"room_updated\",\n  ]),\n  data: z.any(),\n  roomId: z.string().optional(),\n  userId: z.string().optional(),\n  timestamp: z.date().or(z.string()).optional(),\n});\n\nexport type WSEvent = z.infer<typeof wsEventSchema>;\n\n// Video Sync Event\nexport const videoSyncSchema = z.object({\n  action: z.enum([\"play\", \"pause\", \"seek\"]),\n  currentTime: z.number(),\n  videoUrl: z.string().optional(),\n});\n\nexport type VideoSync = z.infer<typeof videoSyncSchema>;\n\n// Auth Response\nexport const authResponseSchema = z.object({\n  token: z.string(),\n  user: z.object({\n    _id: z.string(),\n    username: z.string(),\n    isAdmin: z.boolean(),\n    avatarUrl: z.string().optional(),\n  }),\n});\n\nexport type AuthResponse = z.infer<typeof authResponseSchema>;\n","size_bytes":3628},"src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"src/components/room-controls.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  MonitorPlay,\n  Video,\n  Link as LinkIcon,\n  Copy,\n  LogOut,\n  Settings,\n} from \"lucide-react\";\nimport type { RoomMode } from \"@/lib/schema\";\n\ninterface RoomControlsProps {\n  roomId: string;\n  roomName: string;\n  mode: RoomMode;\n  isOwner: boolean;\n  onModeChange?: (mode: RoomMode) => void;\n  onLeave?: () => void;\n}\n\nexport function RoomControls({\n  roomId,\n  roomName,\n  mode,\n  isOwner,\n  onModeChange,\n  onLeave,\n}: RoomControlsProps) {\n  const { toast } = useToast();\n  const [selectedMode, setSelectedMode] = useState<RoomMode>(mode);\n\n  const inviteLink = `${window.location.origin}/room/${roomId}`;\n\n  const copyInviteLink = async () => {\n    await navigator.clipboard.writeText(inviteLink);\n    toast({\n      title: \"Link copied!\",\n      description: \"Invite link copied to clipboard\",\n    });\n  };\n\n  const handleModeChange = (newMode: RoomMode) => {\n    setSelectedMode(newMode);\n    onModeChange?.(newMode);\n    toast({\n      title: \"Mode changed\",\n      description: `Switched to ${newMode === \"screenshare\" ? \"screen share\" : \"watch party\"} mode`,\n    });\n  };\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      {isOwner && (\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              data-testid=\"button-room-settings\"\n            >\n              <Settings className=\"h-4 w-4 sm:mr-1\" />\n              <span className=\"hidden sm:inline\">Settings</span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-64\" data-testid=\"popover-room-settings\" align=\"end\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium\">Room Mode</h4>\n                <RadioGroup\n                  value={selectedMode}\n                  onValueChange={(value) => handleModeChange(value as RoomMode)}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem\n                      value=\"watchparty\"\n                      id=\"mode-watchparty\"\n                      data-testid=\"radio-mode-watchparty\"\n                    />\n                    <Label htmlFor=\"mode-watchparty\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <Video className=\"h-4 w-4\" />\n                      Watch Party\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem\n                      value=\"screenshare\"\n                      id=\"mode-screenshare\"\n                      data-testid=\"radio-mode-screenshare\"\n                    />\n                    <Label htmlFor=\"mode-screenshare\" className=\"flex items-center gap-2 cursor-pointer\">\n                      <MonitorPlay className=\"h-4 w-4\" />\n                      Screen Share\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n      )}\n\n      <Button\n        variant=\"destructive\"\n        size=\"sm\"\n        onClick={onLeave}\n        data-testid=\"button-leave-room\"\n      >\n        <LogOut className=\"h-4 w-4 sm:mr-1\" />\n        <span className=\"hidden sm:inline\">Leave</span>\n      </Button>\n    </div>\n  );\n}\n","size_bytes":3743},"src/hooks/useYouTubePlayer.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\n\ndeclare global {\n  interface Window {\n    YT: any;\n    onYouTubeIframeAPIReady: () => void;\n  }\n}\n\ninterface UseYouTubePlayerOptions {\n  videoId: string | null;\n  isOwner: boolean;\n  onStateChange?: (action: 'play' | 'pause' | 'seek', currentTime: number) => void;\n}\n\nexport function useYouTubePlayer({ videoId, isOwner, onStateChange }: UseYouTubePlayerOptions) {\n  const playerRef = useRef<any>(null);\n  const playerContainerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const [isAPIReady, setIsAPIReady] = useState(false);\n  const lastActionRef = useRef<{ action: string; time: number } | null>(null);\n  const isSyncingRef = useRef(false);\n\n  // Load YouTube IFrame API\n  useEffect(() => {\n    if (window.YT && window.YT.Player) {\n      setIsAPIReady(true);\n      return;\n    }\n\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode?.insertBefore(tag, firstScriptTag);\n\n    window.onYouTubeIframeAPIReady = () => {\n      setIsAPIReady(true);\n    };\n  }, []);\n\n  // Initialize player when API is ready\n  useEffect(() => {\n    if (!isAPIReady || !videoId || !playerContainerRef.current) {\n      return;\n    }\n\n    // Clean up existing player\n    if (playerRef.current) {\n      playerRef.current.destroy();\n      playerRef.current = null;\n    }\n\n    // Create new player\n    playerRef.current = new window.YT.Player(playerContainerRef.current, {\n      videoId,\n      playerVars: {\n        autoplay: 0,\n        controls: isOwner ? 1 : 0,\n        disablekb: isOwner ? 0 : 1,\n        modestbranding: 1,\n        rel: 0,\n        fs: 1,\n        enablejsapi: 1,\n      },\n      events: {\n        onReady: () => {\n          setIsReady(true);\n        },\n        onStateChange: (event: any) => {\n          if (isSyncingRef.current || !isOwner) {\n            return;\n          }\n\n          const currentTime = playerRef.current?.getCurrentTime() || 0;\n          \n          // YT.PlayerState: -1 (unstarted), 0 (ended), 1 (playing), 2 (paused), 3 (buffering), 5 (cued)\n          if (event.data === window.YT.PlayerState.PLAYING) {\n            const lastAction = lastActionRef.current;\n            const timeDiff = lastAction ? Math.abs(currentTime - lastAction.time) : 0;\n            \n            // Only send play event if it's a new play or significant time difference\n            if (!lastAction || lastAction.action !== 'play' || timeDiff > 1) {\n              lastActionRef.current = { action: 'play', time: currentTime };\n              onStateChange?.('play', currentTime);\n            }\n          } else if (event.data === window.YT.PlayerState.PAUSED) {\n            const lastAction = lastActionRef.current;\n            \n            // Only send pause event if last action wasn't pause\n            if (!lastAction || lastAction.action !== 'pause') {\n              lastActionRef.current = { action: 'pause', time: currentTime };\n              onStateChange?.('pause', currentTime);\n            }\n          }\n        },\n      },\n    });\n\n    return () => {\n      if (playerRef.current) {\n        playerRef.current.destroy();\n        playerRef.current = null;\n      }\n    };\n  }, [isAPIReady, videoId, isOwner, onStateChange]);\n\n  const syncVideo = useCallback((action: 'play' | 'pause' | 'seek', currentTime: number) => {\n    if (!playerRef.current || !isReady) {\n      return;\n    }\n\n    isSyncingRef.current = true;\n\n    try {\n      const playerCurrentTime = playerRef.current.getCurrentTime();\n      const timeDiff = Math.abs(playerCurrentTime - currentTime);\n\n      // Always seek if time difference is significant (more than 2 seconds)\n      if (timeDiff > 2) {\n        playerRef.current.seekTo(currentTime, true);\n      }\n\n      // Apply the action\n      if (action === 'play') {\n        playerRef.current.playVideo();\n      } else if (action === 'pause') {\n        playerRef.current.pauseVideo();\n      } else if (action === 'seek') {\n        playerRef.current.seekTo(currentTime, true);\n      }\n\n      lastActionRef.current = { action, time: currentTime };\n    } finally {\n      // Reset sync flag after a short delay\n      setTimeout(() => {\n        isSyncingRef.current = false;\n      }, 500);\n    }\n  }, [isReady]);\n\n  const play = useCallback(() => {\n    if (!playerRef.current || !isReady || !isOwner) return;\n    playerRef.current.playVideo();\n  }, [isReady, isOwner]);\n\n  const pause = useCallback(() => {\n    if (!playerRef.current || !isReady || !isOwner) return;\n    playerRef.current.pauseVideo();\n  }, [isReady, isOwner]);\n\n  const seekTo = useCallback((time: number) => {\n    if (!playerRef.current || !isReady || !isOwner) return;\n    playerRef.current.seekTo(time, true);\n    const currentTime = playerRef.current.getCurrentTime();\n    onStateChange?.('seek', currentTime);\n  }, [isReady, isOwner, onStateChange]);\n\n  return {\n    playerContainerRef,\n    isReady,\n    syncVideo,\n    play,\n    pause,\n    seekTo,\n  };\n}\n","size_bytes":5091},"src/components/bottom-nav.tsx":{"content":"import { useState } from \"react\";\nimport { MessageCircle, Users, Settings } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useLocation } from \"wouter\";\nimport type { RoomMode } from \"@/lib/schema\";\nimport { MonitorPlay, Video, LogOut } from \"lucide-react\";\n\nexport type BottomNavTab = \"chat\" | \"participants\" | \"settings\";\n\ninterface BottomNavProps {\n  activeTab: BottomNavTab;\n  onTabChange: (tab: BottomNavTab) => void;\n  participantCount?: number;\n  roomName?: string;\n  roomMode?: RoomMode;\n  isOwner?: boolean;\n  onModeChange?: (mode: RoomMode) => void;\n  onLeaveRoom?: () => void;\n}\n\nexport function BottomNav({ \n  activeTab, \n  onTabChange, \n  participantCount = 0,\n  roomName,\n  roomMode,\n  isOwner = false,\n  onModeChange,\n  onLeaveRoom,\n}: BottomNavProps) {\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [selectedMode, setSelectedMode] = useState<RoomMode>(roomMode || \"watchparty\");\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleTabClick = (tab: BottomNavTab) => {\n    if (tab === \"settings\") {\n      setSettingsOpen(true);\n    } else {\n      onTabChange(tab);\n    }\n  };\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation(\"/login\");\n  };\n\n  const handleModeChange = (newMode: RoomMode) => {\n    setSelectedMode(newMode);\n    onModeChange?.(newMode);\n  };\n\n  return (\n    <>\n      {/* Bottom Navigation Bar */}\n      <div className=\"fixed bottom-0 left-0 right-0 z-40 bg-background border-t\" data-testid=\"bottom-nav\">\n        <div className=\"flex items-center justify-around h-16\">\n          {/* Chat Tab */}\n          <button\n            onClick={() => handleTabClick(\"chat\")}\n            className={cn(\n              \"flex flex-col items-center justify-center flex-1 h-full gap-1 transition-colors\",\n              activeTab === \"chat\" \n                ? \"text-primary\" \n                : \"text-muted-foreground hover-elevate\"\n            )}\n            data-testid=\"tab-chat\"\n          >\n            <MessageCircle className=\"h-5 w-5\" />\n            <span className=\"text-xs font-medium\">Chat</span>\n          </button>\n\n          {/* Participants Tab */}\n          <button\n            onClick={() => handleTabClick(\"participants\")}\n            className={cn(\n              \"flex flex-col items-center justify-center flex-1 h-full gap-1 transition-colors\",\n              activeTab === \"participants\" \n                ? \"text-primary\" \n                : \"text-muted-foreground hover-elevate\"\n            )}\n            data-testid=\"tab-participants\"\n          >\n            <Users className=\"h-5 w-5\" />\n            <span className=\"text-xs font-medium\">Participants</span>\n          </button>\n\n          {/* Settings Tab */}\n          <button\n            onClick={() => handleTabClick(\"settings\")}\n            className=\"flex flex-col items-center justify-center flex-1 h-full gap-1 text-muted-foreground hover-elevate transition-colors\"\n            data-testid=\"tab-settings\"\n          >\n            <Settings className=\"h-5 w-5\" />\n            <span className=\"text-xs font-medium\">Settings</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Settings Modal */}\n      <Sheet open={settingsOpen} onOpenChange={setSettingsOpen}>\n        <SheetContent side=\"bottom\" className=\"h-auto max-h-[80vh]\" data-testid=\"settings-modal\">\n          <SheetHeader>\n            <SheetTitle>Settings</SheetTitle>\n          </SheetHeader>\n          \n          <div className=\"mt-6 space-y-6\">\n            {/* Room Info Section (only show if roomName is provided) */}\n            {roomName && (\n              <>\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-semibold text-sm text-muted-foreground\">Room Information</h3>\n                  <div className=\"flex items-center justify-between p-3 rounded-md bg-muted/50\">\n                    <div>\n                      <p className=\"font-medium\">{roomName}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {roomMode === \"screenshare\" ? \"Screen Share\" : \"Watch Party\"}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {participantCount} {participantCount === 1 ? 'participant' : 'participants'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Room Mode Settings (Owner Only) */}\n                  {isOwner && onModeChange && (\n                    <div className=\"space-y-3 p-3 rounded-md border\">\n                      <h4 className=\"font-medium text-sm\">Room Mode</h4>\n                      <RadioGroup\n                        value={selectedMode}\n                        onValueChange={(value) => handleModeChange(value as RoomMode)}\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem\n                            value=\"watchparty\"\n                            id=\"mobile-mode-watchparty\"\n                          />\n                          <Label htmlFor=\"mobile-mode-watchparty\" className=\"flex items-center gap-2 cursor-pointer\">\n                            <Video className=\"h-4 w-4\" />\n                            Watch Party\n                          </Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem\n                            value=\"screenshare\"\n                            id=\"mobile-mode-screenshare\"\n                          />\n                          <Label htmlFor=\"mobile-mode-screenshare\" className=\"flex items-center gap-2 cursor-pointer\">\n                            <MonitorPlay className=\"h-4 w-4\" />\n                            Screen Share\n                          </Label>\n                        </div>\n                      </RadioGroup>\n                    </div>\n                  )}\n\n                  {/* Leave Room Button */}\n                  {onLeaveRoom && (\n                    <Button\n                      variant=\"destructive\"\n                      className=\"w-full gap-2\"\n                      onClick={() => {\n                        setSettingsOpen(false);\n                        onLeaveRoom();\n                      }}\n                    >\n                      <LogOut className=\"h-4 w-4\" />\n                      Leave Room\n                    </Button>\n                  )}\n                </div>\n\n                <Separator />\n              </>\n            )}\n\n            {/* User Profile Section */}\n            {user && (\n              <div className=\"flex items-center gap-3 p-4 rounded-md bg-muted/50\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarFallback className=\"text-lg\">\n                    {user.username.slice(0, 2).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <p className=\"font-semibold\">{user.username}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {user.isAdmin ? \"Administrator\" : \"Member\"}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            <Separator />\n\n            {/* Theme Toggle */}\n            <div className=\"flex items-center justify-between p-4 rounded-md hover-elevate\">\n              <div className=\"flex-1\">\n                <p className=\"font-medium\">Theme</p>\n                <p className=\"text-sm text-muted-foreground\">Toggle dark/light mode</p>\n              </div>\n              <ThemeToggle />\n            </div>\n\n            <Separator />\n\n            {/* Logout Button */}\n            <div className=\"space-y-3\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => setLocation(\"/profile\")}\n                data-testid=\"button-profile\"\n              >\n                View Profile\n              </Button>\n              \n              <Button\n                variant=\"destructive\"\n                className=\"w-full\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          </div>\n        </SheetContent>\n      </Sheet>\n    </>\n  );\n}\n","size_bytes":9048},"src/hooks/useScreenShare.ts":{"content":"import { useState, useCallback, useRef, useEffect } from 'react';\n\nexport function useScreenShare() {\n  const [isSharing, setIsSharing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n\n  const startScreenShare = useCallback(async () => {\n    try {\n      setError(null);\n      \n      // Request screen sharing with the browser's native picker\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: false,\n      });\n\n      streamRef.current = stream;\n      setIsSharing(true);\n\n      // Handle when user stops sharing via browser UI\n      stream.getVideoTracks()[0].addEventListener('ended', () => {\n        stopScreenShare();\n      });\n\n      // Attach stream to video element if ref is set\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n\n      return stream;\n    } catch (err: any) {\n      const errorMessage = err.name === 'NotAllowedError' \n        ? 'Screen sharing permission denied'\n        : 'Failed to start screen sharing';\n      setError(errorMessage);\n      setIsSharing(false);\n      return null;\n    }\n  }, []);\n\n  const stopScreenShare = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n    setIsSharing(false);\n  }, []);\n\n  const attachVideoElement = useCallback((element: HTMLVideoElement | null) => {\n    videoRef.current = element;\n    if (element && streamRef.current) {\n      element.srcObject = streamRef.current;\n    }\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopScreenShare();\n    };\n  }, [stopScreenShare]);\n\n  return {\n    isSharing,\n    error,\n    startScreenShare,\n    stopScreenShare,\n    attachVideoElement,\n  };\n}\n","size_bytes":1991}},"version":2}